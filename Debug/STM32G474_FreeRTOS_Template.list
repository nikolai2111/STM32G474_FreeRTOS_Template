
STM32G474_FreeRTOS_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004000  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080041e0  080041e0  000141e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004248  08004248  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004248  08004248  00014248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004250  08004250  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f50  20000060  080042b8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fb0  080042b8  00020fb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107d2  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d28  00000000  00000000  000308a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  000335d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b46  00000000  00000000  000344a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267e5  00000000  00000000  00034fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127cc  00000000  00000000  0005b7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f27eb  00000000  00000000  0006df97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003cf0  00000000  00000000  00160784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00164474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080041c8 	.word	0x080041c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080041c8 	.word	0x080041c8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0
return 0;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <vApplicationMallocFailedHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000548:	b5b0      	push	{r4, r5, r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_FREERTOS_Init+0x2c>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	682b      	ldr	r3, [r5, #0]
 800055a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f002 fb74 	bl	8002c4e <osThreadCreate>
 8000566:	4603      	mov	r3, r0
 8000568:	4a03      	ldr	r2, [pc, #12]	; (8000578 <MX_FREERTOS_Init+0x30>)
 800056a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800056c:	bf00      	nop
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bdb0      	pop	{r4, r5, r7, pc}
 8000574:	080041ec 	.word	0x080041ec
 8000578:	2000007c 	.word	0x2000007c

0800057c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f002 fb89 	bl	8002c9c <osDelay>
 800058a:	e7fb      	b.n	8000584 <StartDefaultTask+0x8>

0800058c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_GPIO_Init+0x90>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	4a1d      	ldr	r2, [pc, #116]	; (800061c <MX_GPIO_Init+0x90>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ae:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_GPIO_Init+0x90>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_GPIO_Init+0x90>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <MX_GPIO_Init+0x90>)
 80005c0:	f043 0320 	orr.w	r3, r3, #32
 80005c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_GPIO_Init+0x90>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ca:	f003 0320 	and.w	r3, r3, #32
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_GPIO_Init+0x90>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d6:	4a11      	ldr	r2, [pc, #68]	; (800061c <MX_GPIO_Init+0x90>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <MX_GPIO_Init+0x90>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2120      	movs	r1, #32
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f000 fccb 	bl	8000f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005f6:	2320      	movs	r3, #32
 80005f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f000 fb3a 	bl	8000c88 <HAL_GPIO_Init>

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 f9db 	bl	80009de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f809 	bl	800063e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f7ff ffae 	bl	800058c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000630:	f000 f8a8 	bl	8000784 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000634:	f7ff ff88 	bl	8000548 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000638:	f002 fb02 	bl	8002c40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x1c>

0800063e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b094      	sub	sp, #80	; 0x50
 8000642:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	2238      	movs	r2, #56	; 0x38
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fced 	bl	800402c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000664:	f000 fcaa 	bl	8000fbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2340      	movs	r3, #64	; 0x40
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000676:	2300      	movs	r3, #0
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fd40 	bl	8001104 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800068a:	f000 f818 	bl	80006be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000692:	2301      	movs	r3, #1
 8000694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 f844 	bl	8001734 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006b2:	f000 f804 	bl	80006be <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c2:	b672      	cpsid	i
}
 80006c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <Error_Handler+0x8>

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <HAL_MspInit+0x4c>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <HAL_MspInit+0x4c>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6613      	str	r3, [r2, #96]	; 0x60
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_MspInit+0x4c>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <HAL_MspInit+0x4c>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <HAL_MspInit+0x4c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	6593      	str	r3, [r2, #88]	; 0x58
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HAL_MspInit+0x4c>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	210f      	movs	r1, #15
 8000702:	f06f 0001 	mvn.w	r0, #1
 8000706:	f000 fa98 	bl	8000c3a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f99c 	bl	8000a84 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800074c:	f002 ffde 	bl	800370c <xTaskGetSchedulerState>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d001      	beq.n	800075a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000756:	f003 fa1f 	bl	8003b98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <SystemInit+0x20>)
 8000766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <SystemInit+0x20>)
 800076c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 800078a:	4a22      	ldr	r2, [pc, #136]	; (8000814 <MX_LPUART1_UART_Init+0x90>)
 800078c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c0:	4b13      	ldr	r3, [pc, #76]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007c6:	4812      	ldr	r0, [pc, #72]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 80007c8:	f001 fc1e 	bl	8002008 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007d2:	f7ff ff74 	bl	80006be <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d6:	2100      	movs	r1, #0
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 80007da:	f002 f94f 	bl	8002a7c <HAL_UARTEx_SetTxFifoThreshold>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007e4:	f7ff ff6b 	bl	80006be <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	4809      	ldr	r0, [pc, #36]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 80007ec:	f002 f984 	bl	8002af8 <HAL_UARTEx_SetRxFifoThreshold>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007f6:	f7ff ff62 	bl	80006be <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_LPUART1_UART_Init+0x8c>)
 80007fc:	f002 f905 	bl	8002a0a <HAL_UARTEx_DisableFifoMode>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000806:	f7ff ff5a 	bl	80006be <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000080 	.word	0x20000080
 8000814:	40008000 	.word	0x40008000

08000818 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09e      	sub	sp, #120	; 0x78
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2254      	movs	r2, #84	; 0x54
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fbf7 	bl	800402c <memset>
  if(uartHandle->Instance==LPUART1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a1f      	ldr	r2, [pc, #124]	; (80008c0 <HAL_UART_MspInit+0xa8>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d136      	bne.n	80008b6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000848:	2320      	movs	r3, #32
 800084a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4618      	mov	r0, r3
 8000856:	f001 f989 	bl	8001b6c <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000860:	f7ff ff2d 	bl	80006be <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <HAL_UART_MspInit+0xac>)
 8000866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000868:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <HAL_UART_MspInit+0xac>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <HAL_UART_MspInit+0xac>)
 8000872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_UART_MspInit+0xac>)
 800087e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000880:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <HAL_UART_MspInit+0xac>)
 8000882:	f043 0301 	orr.w	r3, r3, #1
 8000886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_UART_MspInit+0xac>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000894:	230c      	movs	r3, #12
 8000896:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80008a4:	230c      	movs	r3, #12
 80008a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008ac:	4619      	mov	r1, r3
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f000 f9e9 	bl	8000c88 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80008b6:	bf00      	nop
 80008b8:	3778      	adds	r7, #120	; 0x78
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40008000 	.word	0x40008000
 80008c4:	40021000 	.word	0x40021000

080008c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ce:	490e      	ldr	r1, [pc, #56]	; (8000908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <LoopForever+0xe>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e4:	4c0b      	ldr	r4, [pc, #44]	; (8000914 <LoopForever+0x16>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008f2:	f7ff ff35 	bl	8000760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008f6:	f003 fbf7 	bl	80040e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008fa:	f7ff fe91 	bl	8000620 <main>

080008fe <LoopForever>:

LoopForever:
    b LoopForever
 80008fe:	e7fe      	b.n	80008fe <LoopForever>
  ldr   r0, =_estack
 8000900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800090c:	08004258 	.word	0x08004258
  ldr r2, =_sbss
 8000910:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000914:	20000fb0 	.word	0x20000fb0

08000918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_2_IRQHandler>

0800091a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b084      	sub	sp, #16
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d104      	bne.n	8000932 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
 800092c:	f7ff fec7 	bl	80006be <Error_Handler>
 8000930:	e7fe      	b.n	8000930 <stm32_lock_acquire+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000932:	f3ef 8305 	mrs	r3, IPSR
 8000936:	60fb      	str	r3, [r7, #12]
  return(result);
 8000938:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 800093a:	2b00      	cmp	r3, #0
 800093c:	d004      	beq.n	8000948 <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 800093e:	b672      	cpsid	i
}
 8000940:	bf00      	nop
 8000942:	f7ff febc 	bl	80006be <Error_Handler>
 8000946:	e7fe      	b.n	8000946 <stm32_lock_acquire+0x2c>
  vTaskSuspendAll();
 8000948:	f002 fc44 	bl	80031d4 <vTaskSuspendAll>
}
 800094c:	bf00      	nop
 800094e:	3710      	adds	r7, #16
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d104      	bne.n	800096c <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000962:	b672      	cpsid	i
}
 8000964:	bf00      	nop
 8000966:	f7ff feaa 	bl	80006be <Error_Handler>
 800096a:	e7fe      	b.n	800096a <stm32_lock_release+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800096c:	f3ef 8305 	mrs	r3, IPSR
 8000970:	60fb      	str	r3, [r7, #12]
  return(result);
 8000972:	68fb      	ldr	r3, [r7, #12]
  STM32_LOCK_BLOCK_IF_INTERRUPT_CONTEXT();
 8000974:	2b00      	cmp	r3, #0
 8000976:	d004      	beq.n	8000982 <stm32_lock_release+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
 800097c:	f7ff fe9f 	bl	80006be <Error_Handler>
 8000980:	e7fe      	b.n	8000980 <stm32_lock_release+0x2c>
  xTaskResumeAll();
 8000982:	f002 fc35 	bl	80031f0 <xTaskResumeAll>
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d104      	bne.n	80009a6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
 80009a0:	f7ff fe8d 	bl	80006be <Error_Handler>
 80009a4:	e7fe      	b.n	80009a4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ffb6 	bl	800091a <stm32_lock_acquire>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d104      	bne.n	80009ce <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80009c4:	b672      	cpsid	i
}
 80009c6:	bf00      	nop
 80009c8:	f7ff fe79 	bl	80006be <Error_Handler>
 80009cc:	e7fe      	b.n	80009cc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffbf 	bl	8000954 <stm32_lock_release>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e8:	2003      	movs	r0, #3
 80009ea:	f000 f91b 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ee:	200f      	movs	r0, #15
 80009f0:	f000 f80e 	bl	8000a10 <HAL_InitTick>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	71fb      	strb	r3, [r7, #7]
 80009fe:	e001      	b.n	8000a04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a00:	f7ff fe62 	bl	80006c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a04:	79fb      	ldrb	r3, [r7, #7]

}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_InitTick+0x68>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d022      	beq.n	8000a6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_InitTick+0x6c>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <HAL_InitTick+0x68>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f918 	bl	8000c6e <HAL_SYSTICK_Config>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10f      	bne.n	8000a64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b0f      	cmp	r3, #15
 8000a48:	d809      	bhi.n	8000a5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	6879      	ldr	r1, [r7, #4]
 8000a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a52:	f000 f8f2 	bl	8000c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <HAL_InitTick+0x70>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6013      	str	r3, [r2, #0]
 8000a5c:	e007      	b.n	8000a6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
 8000a62:	e004      	b.n	8000a6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e001      	b.n	8000a6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_IncTick+0x1c>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <HAL_IncTick+0x1c>)
 8000a94:	6013      	str	r3, [r2, #0]
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	20000114 	.word	0x20000114
 8000aa4:	20000008 	.word	0x20000008

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000114 	.word	0x20000114

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff47 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff5e 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff90 	bl	8000b78 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5f 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffb2 	bl	8000be0 <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b087      	sub	sp, #28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c96:	e15a      	b.n	8000f4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f000 814c 	beq.w	8000f48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d005      	beq.n	8000cc8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d130      	bne.n	8000d2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68da      	ldr	r2, [r3, #12]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cfe:	2201      	movs	r2, #1
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 0201 	and.w	r2, r3, #1
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d017      	beq.n	8000d66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d123      	bne.n	8000dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	220f      	movs	r2, #15
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	691a      	ldr	r2, [r3, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f003 0307 	and.w	r3, r3, #7
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	08da      	lsrs	r2, r3, #3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3208      	adds	r2, #8
 8000db4:	6939      	ldr	r1, [r7, #16]
 8000db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0203 	and.w	r2, r3, #3
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 80a6 	beq.w	8000f48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfc:	4b5b      	ldr	r3, [pc, #364]	; (8000f6c <HAL_GPIO_Init+0x2e4>)
 8000dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e00:	4a5a      	ldr	r2, [pc, #360]	; (8000f6c <HAL_GPIO_Init+0x2e4>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6613      	str	r3, [r2, #96]	; 0x60
 8000e08:	4b58      	ldr	r3, [pc, #352]	; (8000f6c <HAL_GPIO_Init+0x2e4>)
 8000e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e14:	4a56      	ldr	r2, [pc, #344]	; (8000f70 <HAL_GPIO_Init+0x2e8>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e3e:	d01f      	beq.n	8000e80 <HAL_GPIO_Init+0x1f8>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <HAL_GPIO_Init+0x2ec>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d019      	beq.n	8000e7c <HAL_GPIO_Init+0x1f4>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a4b      	ldr	r2, [pc, #300]	; (8000f78 <HAL_GPIO_Init+0x2f0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d013      	beq.n	8000e78 <HAL_GPIO_Init+0x1f0>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a4a      	ldr	r2, [pc, #296]	; (8000f7c <HAL_GPIO_Init+0x2f4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d00d      	beq.n	8000e74 <HAL_GPIO_Init+0x1ec>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a49      	ldr	r2, [pc, #292]	; (8000f80 <HAL_GPIO_Init+0x2f8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d007      	beq.n	8000e70 <HAL_GPIO_Init+0x1e8>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a48      	ldr	r2, [pc, #288]	; (8000f84 <HAL_GPIO_Init+0x2fc>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d101      	bne.n	8000e6c <HAL_GPIO_Init+0x1e4>
 8000e68:	2305      	movs	r3, #5
 8000e6a:	e00a      	b.n	8000e82 <HAL_GPIO_Init+0x1fa>
 8000e6c:	2306      	movs	r3, #6
 8000e6e:	e008      	b.n	8000e82 <HAL_GPIO_Init+0x1fa>
 8000e70:	2304      	movs	r3, #4
 8000e72:	e006      	b.n	8000e82 <HAL_GPIO_Init+0x1fa>
 8000e74:	2303      	movs	r3, #3
 8000e76:	e004      	b.n	8000e82 <HAL_GPIO_Init+0x1fa>
 8000e78:	2302      	movs	r3, #2
 8000e7a:	e002      	b.n	8000e82 <HAL_GPIO_Init+0x1fa>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e000      	b.n	8000e82 <HAL_GPIO_Init+0x1fa>
 8000e80:	2300      	movs	r3, #0
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	f002 0203 	and.w	r2, r2, #3
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	4093      	lsls	r3, r2
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e92:	4937      	ldr	r1, [pc, #220]	; (8000f70 <HAL_GPIO_Init+0x2e8>)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	089b      	lsrs	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ea0:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ec4:	4a30      	ldr	r2, [pc, #192]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eee:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f42:	4a11      	ldr	r2, [pc, #68]	; (8000f88 <HAL_GPIO_Init+0x300>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	fa22 f303 	lsr.w	r3, r2, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f47f ae9d 	bne.w	8000c98 <HAL_GPIO_Init+0x10>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	371c      	adds	r7, #28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010000 	.word	0x40010000
 8000f74:	48000400 	.word	0x48000400
 8000f78:	48000800 	.word	0x48000800
 8000f7c:	48000c00 	.word	0x48000c00
 8000f80:	48001000 	.word	0x48001000
 8000f84:	48001400 	.word	0x48001400
 8000f88:	40010400 	.word	0x40010400

08000f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f9c:	787b      	ldrb	r3, [r7, #1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d141      	bne.n	800104e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fca:	4b4b      	ldr	r3, [pc, #300]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd6:	d131      	bne.n	800103c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fd8:	4b47      	ldr	r3, [pc, #284]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fde:	4a46      	ldr	r2, [pc, #280]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fe4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff0:	4a41      	ldr	r2, [pc, #260]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ff8:	4b40      	ldr	r3, [pc, #256]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2232      	movs	r2, #50	; 0x32
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	4a3f      	ldr	r2, [pc, #252]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001004:	fba2 2303 	umull	r2, r3, r2, r3
 8001008:	0c9b      	lsrs	r3, r3, #18
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800100e:	e002      	b.n	8001016 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	3b01      	subs	r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001022:	d102      	bne.n	800102a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f2      	bne.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800102a:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001036:	d158      	bne.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e057      	b.n	80010ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800103c:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800103e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001042:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001048:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800104c:	e04d      	b.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001054:	d141      	bne.n	80010da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800105e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001062:	d131      	bne.n	80010c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001070:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001074:	4b20      	ldr	r3, [pc, #128]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800107c:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001082:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2232      	movs	r2, #50	; 0x32
 800108a:	fb02 f303 	mul.w	r3, r2, r3
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	0c9b      	lsrs	r3, r3, #18
 8001096:	3301      	adds	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800109a:	e002      	b.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3b01      	subs	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ae:	d102      	bne.n	80010b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1f2      	bne.n	800109c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c2:	d112      	bne.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e011      	b.n	80010ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010d8:	e007      	b.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40007000 	.word	0x40007000
 80010fc:	20000000 	.word	0x20000000
 8001100:	431bde83 	.word	0x431bde83

08001104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e306      	b.n	8001724 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d075      	beq.n	800120e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001122:	4b97      	ldr	r3, [pc, #604]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800112c:	4b94      	ldr	r3, [pc, #592]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	2b0c      	cmp	r3, #12
 800113a:	d102      	bne.n	8001142 <HAL_RCC_OscConfig+0x3e>
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d002      	beq.n	8001148 <HAL_RCC_OscConfig+0x44>
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	2b08      	cmp	r3, #8
 8001146:	d10b      	bne.n	8001160 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	4b8d      	ldr	r3, [pc, #564]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d05b      	beq.n	800120c <HAL_RCC_OscConfig+0x108>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d157      	bne.n	800120c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e2e1      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001168:	d106      	bne.n	8001178 <HAL_RCC_OscConfig+0x74>
 800116a:	4b85      	ldr	r3, [pc, #532]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a84      	ldr	r2, [pc, #528]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e01d      	b.n	80011b4 <HAL_RCC_OscConfig+0xb0>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001180:	d10c      	bne.n	800119c <HAL_RCC_OscConfig+0x98>
 8001182:	4b7f      	ldr	r3, [pc, #508]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a7e      	ldr	r2, [pc, #504]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b7c      	ldr	r3, [pc, #496]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a7b      	ldr	r2, [pc, #492]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e00b      	b.n	80011b4 <HAL_RCC_OscConfig+0xb0>
 800119c:	4b78      	ldr	r3, [pc, #480]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a77      	ldr	r2, [pc, #476]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b75      	ldr	r3, [pc, #468]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a74      	ldr	r2, [pc, #464]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d013      	beq.n	80011e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011bc:	f7ff fc74 	bl	8000aa8 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fc70 	bl	8000aa8 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e2a6      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011d6:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0xc0>
 80011e2:	e014      	b.n	800120e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e4:	f7ff fc60 	bl	8000aa8 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fc5c 	bl	8000aa8 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e292      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011fe:	4b60      	ldr	r3, [pc, #384]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0xe8>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d075      	beq.n	8001306 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800121a:	4b59      	ldr	r3, [pc, #356]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001224:	4b56      	ldr	r3, [pc, #344]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b0c      	cmp	r3, #12
 8001232:	d102      	bne.n	800123a <HAL_RCC_OscConfig+0x136>
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d002      	beq.n	8001240 <HAL_RCC_OscConfig+0x13c>
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d11f      	bne.n	8001280 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001240:	4b4f      	ldr	r3, [pc, #316]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_OscConfig+0x154>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e265      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001258:	4b49      	ldr	r3, [pc, #292]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	061b      	lsls	r3, r3, #24
 8001266:	4946      	ldr	r1, [pc, #280]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800126c:	4b45      	ldr	r3, [pc, #276]	; (8001384 <HAL_RCC_OscConfig+0x280>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fbcd 	bl	8000a10 <HAL_InitTick>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d043      	beq.n	8001304 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e251      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d023      	beq.n	80012d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001288:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a3c      	ldr	r2, [pc, #240]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff fc08 	bl	8000aa8 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129c:	f7ff fc04 	bl	8000aa8 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e23a      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ae:	4b34      	ldr	r3, [pc, #208]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f0      	beq.n	800129c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	4b31      	ldr	r3, [pc, #196]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	061b      	lsls	r3, r3, #24
 80012c8:	492d      	ldr	r1, [pc, #180]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 80012ca:	4313      	orrs	r3, r2
 80012cc:	604b      	str	r3, [r1, #4]
 80012ce:	e01a      	b.n	8001306 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a2a      	ldr	r2, [pc, #168]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 80012d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fbe4 	bl	8000aa8 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fbe0 	bl	8000aa8 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e216      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x1e0>
 8001302:	e000      	b.n	8001306 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001304:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d041      	beq.n	8001396 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01c      	beq.n	8001354 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 800131c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001320:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132a:	f7ff fbbd 	bl	8000aa8 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fbb9 	bl	8000aa8 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e1ef      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0ef      	beq.n	8001332 <HAL_RCC_OscConfig+0x22e>
 8001352:	e020      	b.n	8001396 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001354:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 8001356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135a:	4a09      	ldr	r2, [pc, #36]	; (8001380 <HAL_RCC_OscConfig+0x27c>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001364:	f7ff fba0 	bl	8000aa8 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800136a:	e00d      	b.n	8001388 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800136c:	f7ff fb9c 	bl	8000aa8 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d906      	bls.n	8001388 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e1d2      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001388:	4b8c      	ldr	r3, [pc, #560]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 800138a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1ea      	bne.n	800136c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 80a6 	beq.w	80014f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a4:	2300      	movs	r3, #0
 80013a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013a8:	4b84      	ldr	r3, [pc, #528]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_OscConfig+0x2b4>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x2b6>
 80013b8:	2300      	movs	r3, #0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00d      	beq.n	80013da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b7f      	ldr	r3, [pc, #508]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	4a7e      	ldr	r2, [pc, #504]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 80013c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c8:	6593      	str	r3, [r2, #88]	; 0x58
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 80013cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013d6:	2301      	movs	r3, #1
 80013d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013da:	4b79      	ldr	r3, [pc, #484]	; (80015c0 <HAL_RCC_OscConfig+0x4bc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013e6:	4b76      	ldr	r3, [pc, #472]	; (80015c0 <HAL_RCC_OscConfig+0x4bc>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a75      	ldr	r2, [pc, #468]	; (80015c0 <HAL_RCC_OscConfig+0x4bc>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fb59 	bl	8000aa8 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fa:	f7ff fb55 	bl	8000aa8 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e18b      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800140c:	4b6c      	ldr	r3, [pc, #432]	; (80015c0 <HAL_RCC_OscConfig+0x4bc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d108      	bne.n	8001432 <HAL_RCC_OscConfig+0x32e>
 8001420:	4b66      	ldr	r3, [pc, #408]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001426:	4a65      	ldr	r2, [pc, #404]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001430:	e024      	b.n	800147c <HAL_RCC_OscConfig+0x378>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b05      	cmp	r3, #5
 8001438:	d110      	bne.n	800145c <HAL_RCC_OscConfig+0x358>
 800143a:	4b60      	ldr	r3, [pc, #384]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 800143c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001440:	4a5e      	ldr	r2, [pc, #376]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800144a:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 800144c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001450:	4a5a      	ldr	r2, [pc, #360]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800145a:	e00f      	b.n	800147c <HAL_RCC_OscConfig+0x378>
 800145c:	4b57      	ldr	r3, [pc, #348]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 800145e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001462:	4a56      	ldr	r2, [pc, #344]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800146c:	4b53      	ldr	r3, [pc, #332]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 800146e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001472:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001474:	f023 0304 	bic.w	r3, r3, #4
 8001478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d016      	beq.n	80014b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff fb10 	bl	8000aa8 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148c:	f7ff fb0c 	bl	8000aa8 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	; 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e140      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014a2:	4b46      	ldr	r3, [pc, #280]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 80014a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0ed      	beq.n	800148c <HAL_RCC_OscConfig+0x388>
 80014b0:	e015      	b.n	80014de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff faf9 	bl	8000aa8 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014b8:	e00a      	b.n	80014d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ba:	f7ff faf5 	bl	8000aa8 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e129      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014d0:	4b3a      	ldr	r3, [pc, #232]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 80014d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1ed      	bne.n	80014ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014de:	7ffb      	ldrb	r3, [r7, #31]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d105      	bne.n	80014f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e4:	4b35      	ldr	r3, [pc, #212]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	4a34      	ldr	r2, [pc, #208]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 80014ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0320 	and.w	r3, r3, #32
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d03c      	beq.n	8001576 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d01c      	beq.n	800153e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001504:	4b2d      	ldr	r3, [pc, #180]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800150a:	4a2c      	ldr	r2, [pc, #176]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001514:	f7ff fac8 	bl	8000aa8 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800151c:	f7ff fac4 	bl	8000aa8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0fa      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0ef      	beq.n	800151c <HAL_RCC_OscConfig+0x418>
 800153c:	e01b      	b.n	8001576 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800153e:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001544:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154e:	f7ff faab 	bl	8000aa8 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001556:	f7ff faa7 	bl	8000aa8 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e0dd      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 800156a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1ef      	bne.n	8001556 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80d1 	beq.w	8001722 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b0c      	cmp	r3, #12
 800158a:	f000 808b 	beq.w	80016a4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d15e      	bne.n	8001654 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_RCC_OscConfig+0x4b8>)
 800159c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fa81 	bl	8000aa8 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a8:	e00c      	b.n	80015c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff fa7d 	bl	8000aa8 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d905      	bls.n	80015c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0b3      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c4:	4b59      	ldr	r3, [pc, #356]	; (800172c <HAL_RCC_OscConfig+0x628>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ec      	bne.n	80015aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d0:	4b56      	ldr	r3, [pc, #344]	; (800172c <HAL_RCC_OscConfig+0x628>)
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	4b56      	ldr	r3, [pc, #344]	; (8001730 <HAL_RCC_OscConfig+0x62c>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6a11      	ldr	r1, [r2, #32]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015e0:	3a01      	subs	r2, #1
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	4311      	orrs	r1, r2
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015ea:	0212      	lsls	r2, r2, #8
 80015ec:	4311      	orrs	r1, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015f2:	0852      	lsrs	r2, r2, #1
 80015f4:	3a01      	subs	r2, #1
 80015f6:	0552      	lsls	r2, r2, #21
 80015f8:	4311      	orrs	r1, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015fe:	0852      	lsrs	r2, r2, #1
 8001600:	3a01      	subs	r2, #1
 8001602:	0652      	lsls	r2, r2, #25
 8001604:	4311      	orrs	r1, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800160a:	06d2      	lsls	r2, r2, #27
 800160c:	430a      	orrs	r2, r1
 800160e:	4947      	ldr	r1, [pc, #284]	; (800172c <HAL_RCC_OscConfig+0x628>)
 8001610:	4313      	orrs	r3, r2
 8001612:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001614:	4b45      	ldr	r3, [pc, #276]	; (800172c <HAL_RCC_OscConfig+0x628>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a44      	ldr	r2, [pc, #272]	; (800172c <HAL_RCC_OscConfig+0x628>)
 800161a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800161e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001620:	4b42      	ldr	r3, [pc, #264]	; (800172c <HAL_RCC_OscConfig+0x628>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a41      	ldr	r2, [pc, #260]	; (800172c <HAL_RCC_OscConfig+0x628>)
 8001626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800162a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162c:	f7ff fa3c 	bl	8000aa8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fa38 	bl	8000aa8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e06e      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001646:	4b39      	ldr	r3, [pc, #228]	; (800172c <HAL_RCC_OscConfig+0x628>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x530>
 8001652:	e066      	b.n	8001722 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001654:	4b35      	ldr	r3, [pc, #212]	; (800172c <HAL_RCC_OscConfig+0x628>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a34      	ldr	r2, [pc, #208]	; (800172c <HAL_RCC_OscConfig+0x628>)
 800165a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800165e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <HAL_RCC_OscConfig+0x628>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a31      	ldr	r2, [pc, #196]	; (800172c <HAL_RCC_OscConfig+0x628>)
 8001666:	f023 0303 	bic.w	r3, r3, #3
 800166a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <HAL_RCC_OscConfig+0x628>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	4a2e      	ldr	r2, [pc, #184]	; (800172c <HAL_RCC_OscConfig+0x628>)
 8001672:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fa14 	bl	8000aa8 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fa10 	bl	8000aa8 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e046      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_RCC_OscConfig+0x628>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x580>
 80016a2:	e03e      	b.n	8001722 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e039      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_RCC_OscConfig+0x628>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d12c      	bne.n	800171e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	3b01      	subs	r3, #1
 80016d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d123      	bne.n	800171e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d11b      	bne.n	800171e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d113      	bne.n	800171e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	085b      	lsrs	r3, r3, #1
 8001702:	3b01      	subs	r3, #1
 8001704:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d109      	bne.n	800171e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001714:	085b      	lsrs	r3, r3, #1
 8001716:	3b01      	subs	r3, #1
 8001718:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800171a:	429a      	cmp	r2, r3
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000
 8001730:	019f800c 	.word	0x019f800c

08001734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e11e      	b.n	800198a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b91      	ldr	r3, [pc, #580]	; (8001994 <HAL_RCC_ClockConfig+0x260>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 030f 	and.w	r3, r3, #15
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d910      	bls.n	800177c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b8e      	ldr	r3, [pc, #568]	; (8001994 <HAL_RCC_ClockConfig+0x260>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 020f 	bic.w	r2, r3, #15
 8001762:	498c      	ldr	r1, [pc, #560]	; (8001994 <HAL_RCC_ClockConfig+0x260>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b8a      	ldr	r3, [pc, #552]	; (8001994 <HAL_RCC_ClockConfig+0x260>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e106      	b.n	800198a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d073      	beq.n	8001870 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d129      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001790:	4b81      	ldr	r3, [pc, #516]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0f4      	b.n	800198a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017a0:	f000 f99e 	bl	8001ae0 <RCC_GetSysClockFreqFromPLLSource>
 80017a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4a7c      	ldr	r2, [pc, #496]	; (800199c <HAL_RCC_ClockConfig+0x268>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d93f      	bls.n	800182e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017ae:	4b7a      	ldr	r3, [pc, #488]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d033      	beq.n	800182e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d12f      	bne.n	800182e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017ce:	4b72      	ldr	r3, [pc, #456]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017d6:	4a70      	ldr	r2, [pc, #448]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e024      	b.n	800182e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ec:	4b6a      	ldr	r3, [pc, #424]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0c6      	b.n	800198a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017fc:	4b66      	ldr	r3, [pc, #408]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0be      	b.n	800198a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800180c:	f000 f8ce 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8001810:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4a61      	ldr	r2, [pc, #388]	; (800199c <HAL_RCC_ClockConfig+0x268>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d909      	bls.n	800182e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800181a:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001822:	4a5d      	ldr	r2, [pc, #372]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 8001824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001828:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b5a      	ldr	r3, [pc, #360]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4957      	ldr	r1, [pc, #348]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001840:	f7ff f932 	bl	8000aa8 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff f92e 	bl	8000aa8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e095      	b.n	800198a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d023      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001888:	4b43      	ldr	r3, [pc, #268]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a42      	ldr	r2, [pc, #264]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 800188e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001892:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d007      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018a0:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80018a8:	4a3b      	ldr	r2, [pc, #236]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 80018aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b0:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4936      	ldr	r1, [pc, #216]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b80      	cmp	r3, #128	; 0x80
 80018c8:	d105      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4a32      	ldr	r2, [pc, #200]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 80018d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_RCC_ClockConfig+0x260>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d21d      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_RCC_ClockConfig+0x260>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 020f 	bic.w	r2, r3, #15
 80018ec:	4929      	ldr	r1, [pc, #164]	; (8001994 <HAL_RCC_ClockConfig+0x260>)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018f4:	f7ff f8d8 	bl	8000aa8 <HAL_GetTick>
 80018f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fc:	f7ff f8d4 	bl	8000aa8 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e03b      	b.n	800198a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_ClockConfig+0x260>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d1ed      	bne.n	80018fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4917      	ldr	r1, [pc, #92]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	490f      	ldr	r1, [pc, #60]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800195e:	f000 f825 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_RCC_ClockConfig+0x264>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490c      	ldr	r1, [pc, #48]	; (80019a0 <HAL_RCC_ClockConfig+0x26c>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_RCC_ClockConfig+0x270>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x274>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f844 	bl	8000a10 <HAL_InitTick>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000
 8001998:	40021000 	.word	0x40021000
 800199c:	04c4b400 	.word	0x04c4b400
 80019a0:	08004208 	.word	0x08004208
 80019a4:	20000000 	.word	0x20000000
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019b2:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d102      	bne.n	80019c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	e047      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019c4:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d102      	bne.n	80019d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019d0:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	e03e      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d136      	bne.n	8001a50 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f003 0303 	and.w	r3, r3, #3
 80019ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	3301      	adds	r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d10c      	bne.n	8001a1a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a00:	4a1a      	ldr	r2, [pc, #104]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a0a:	68d2      	ldr	r2, [r2, #12]
 8001a0c:	0a12      	lsrs	r2, r2, #8
 8001a0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
      break;
 8001a18:	e00c      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a1a:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a22:	4a10      	ldr	r2, [pc, #64]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a24:	68d2      	ldr	r2, [r2, #12]
 8001a26:	0a12      	lsrs	r2, r2, #8
 8001a28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
      break;
 8001a32:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0e5b      	lsrs	r3, r3, #25
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	e001      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a54:	693b      	ldr	r3, [r7, #16]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	016e3600 	.word	0x016e3600

08001a70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4904      	ldr	r1, [pc, #16]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08004218 	.word	0x08004218

08001ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ab8:	f7ff ffda 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	0adb      	lsrs	r3, r3, #11
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4904      	ldr	r1, [pc, #16]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001aca:	5ccb      	ldrb	r3, [r1, r3]
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	08004218 	.word	0x08004218

08001ae0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ae6:	4b1e      	ldr	r3, [pc, #120]	; (8001b60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3301      	adds	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2b03      	cmp	r3, #3
 8001b02:	d10c      	bne.n	8001b1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b04:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b0e:	68d2      	ldr	r2, [r2, #12]
 8001b10:	0a12      	lsrs	r2, r2, #8
 8001b12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	617b      	str	r3, [r7, #20]
    break;
 8001b1c:	e00c      	b.n	8001b38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b28:	68d2      	ldr	r2, [r2, #12]
 8001b2a:	0a12      	lsrs	r2, r2, #8
 8001b2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b30:	fb02 f303 	mul.w	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
    break;
 8001b36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0e5b      	lsrs	r3, r3, #25
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	3301      	adds	r3, #1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001b52:	687b      	ldr	r3, [r7, #4]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	40021000 	.word	0x40021000
 8001b64:	016e3600 	.word	0x016e3600
 8001b68:	00f42400 	.word	0x00f42400

08001b6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b74:	2300      	movs	r3, #0
 8001b76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b78:	2300      	movs	r3, #0
 8001b7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f000 8098 	beq.w	8001cba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8e:	4b43      	ldr	r3, [pc, #268]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10d      	bne.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b40      	ldr	r3, [pc, #256]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	4a3f      	ldr	r2, [pc, #252]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb6:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a39      	ldr	r2, [pc, #228]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bc2:	f7fe ff71 	bl	8000aa8 <HAL_GetTick>
 8001bc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bc8:	e009      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7fe ff6d 	bl	8000aa8 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d902      	bls.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	74fb      	strb	r3, [r7, #19]
        break;
 8001bdc:	e005      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001bde:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0ef      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001bea:	7cfb      	ldrb	r3, [r7, #19]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d159      	bne.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bfa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01e      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d019      	beq.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c18:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c38:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d016      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7fe ff2d 	bl	8000aa8 <HAL_GetTick>
 8001c4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c50:	e00b      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7fe ff29 	bl	8000aa8 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d902      	bls.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	74fb      	strb	r3, [r7, #19]
            break;
 8001c68:	e006      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ec      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001c78:	7cfb      	ldrb	r3, [r7, #19]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10b      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c8c:	4903      	ldr	r1, [pc, #12]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c94:	e008      	b.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c96:	7cfb      	ldrb	r3, [r7, #19]
 8001c98:	74bb      	strb	r3, [r7, #18]
 8001c9a:	e005      	b.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
 8001ca6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ca8:	7c7b      	ldrb	r3, [r7, #17]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d105      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cae:	4ba7      	ldr	r3, [pc, #668]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	4aa6      	ldr	r2, [pc, #664]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00a      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cc6:	4ba1      	ldr	r3, [pc, #644]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ccc:	f023 0203 	bic.w	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	499d      	ldr	r1, [pc, #628]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00a      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ce8:	4b98      	ldr	r3, [pc, #608]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	f023 020c 	bic.w	r2, r3, #12
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4995      	ldr	r1, [pc, #596]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00a      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d0a:	4b90      	ldr	r3, [pc, #576]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	498c      	ldr	r1, [pc, #560]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00a      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d2c:	4b87      	ldr	r3, [pc, #540]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	4984      	ldr	r1, [pc, #528]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00a      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	497b      	ldr	r1, [pc, #492]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00a      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d70:	4b76      	ldr	r3, [pc, #472]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	4973      	ldr	r1, [pc, #460]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00a      	beq.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d92:	4b6e      	ldr	r3, [pc, #440]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	496a      	ldr	r1, [pc, #424]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00a      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001db4:	4b65      	ldr	r3, [pc, #404]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4962      	ldr	r1, [pc, #392]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00a      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ddc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	4959      	ldr	r1, [pc, #356]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00a      	beq.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001df8:	4b54      	ldr	r3, [pc, #336]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001dfe:	f023 0203 	bic.w	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	4951      	ldr	r1, [pc, #324]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e28:	4948      	ldr	r1, [pc, #288]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d015      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e3c:	4b43      	ldr	r3, [pc, #268]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4940      	ldr	r1, [pc, #256]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e5a:	d105      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e5c:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4a3a      	ldr	r2, [pc, #232]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d015      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e74:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e82:	4932      	ldr	r1, [pc, #200]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e92:	d105      	bne.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e94:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e9e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d015      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	4924      	ldr	r1, [pc, #144]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ed6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d015      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef2:	4916      	ldr	r1, [pc, #88]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f02:	d105      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f0e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d019      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4908      	ldr	r1, [pc, #32]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f3a:	d109      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a02      	ldr	r2, [pc, #8]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f46:	60d3      	str	r3, [r2, #12]
 8001f48:	e002      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001f4a:	bf00      	nop
 8001f4c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d015      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	4926      	ldr	r1, [pc, #152]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001f7c:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a20      	ldr	r2, [pc, #128]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f86:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d015      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa2:	4918      	ldr	r1, [pc, #96]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d015      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	490a      	ldr	r1, [pc, #40]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ff6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001ff8:	7cbb      	ldrb	r3, [r7, #18]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e042      	b.n	80020a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002020:	2b00      	cmp	r3, #0
 8002022:	d106      	bne.n	8002032 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe fbf3 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2224      	movs	r2, #36	; 0x24
 8002036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0201 	bic.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f82c 	bl	80020a8 <UART_SetConfig>
 8002050:	4603      	mov	r3, r0
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e022      	b.n	80020a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fb1c 	bl	80026a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002086:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 fba3 	bl	80027e4 <UART_CheckIdleState>
 800209e:	4603      	mov	r3, r0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020ac:	b08c      	sub	sp, #48	; 0x30
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	431a      	orrs	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4baa      	ldr	r3, [pc, #680]	; (8002380 <UART_SetConfig+0x2d8>)
 80020d8:	4013      	ands	r3, r2
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	6812      	ldr	r2, [r2, #0]
 80020de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a9f      	ldr	r2, [pc, #636]	; (8002384 <UART_SetConfig+0x2dc>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002110:	4313      	orrs	r3, r2
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800211e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002128:	430b      	orrs	r3, r1
 800212a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f023 010f 	bic.w	r1, r3, #15
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a90      	ldr	r2, [pc, #576]	; (8002388 <UART_SetConfig+0x2e0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d125      	bne.n	8002198 <UART_SetConfig+0xf0>
 800214c:	4b8f      	ldr	r3, [pc, #572]	; (800238c <UART_SetConfig+0x2e4>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b03      	cmp	r3, #3
 8002158:	d81a      	bhi.n	8002190 <UART_SetConfig+0xe8>
 800215a:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <UART_SetConfig+0xb8>)
 800215c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002160:	08002171 	.word	0x08002171
 8002164:	08002181 	.word	0x08002181
 8002168:	08002179 	.word	0x08002179
 800216c:	08002189 	.word	0x08002189
 8002170:	2301      	movs	r3, #1
 8002172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002176:	e116      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002178:	2302      	movs	r3, #2
 800217a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800217e:	e112      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002180:	2304      	movs	r3, #4
 8002182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002186:	e10e      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002188:	2308      	movs	r3, #8
 800218a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800218e:	e10a      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002190:	2310      	movs	r3, #16
 8002192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002196:	e106      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a7c      	ldr	r2, [pc, #496]	; (8002390 <UART_SetConfig+0x2e8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d138      	bne.n	8002214 <UART_SetConfig+0x16c>
 80021a2:	4b7a      	ldr	r3, [pc, #488]	; (800238c <UART_SetConfig+0x2e4>)
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d82d      	bhi.n	800220c <UART_SetConfig+0x164>
 80021b0:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <UART_SetConfig+0x110>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021ed 	.word	0x080021ed
 80021bc:	0800220d 	.word	0x0800220d
 80021c0:	0800220d 	.word	0x0800220d
 80021c4:	0800220d 	.word	0x0800220d
 80021c8:	080021fd 	.word	0x080021fd
 80021cc:	0800220d 	.word	0x0800220d
 80021d0:	0800220d 	.word	0x0800220d
 80021d4:	0800220d 	.word	0x0800220d
 80021d8:	080021f5 	.word	0x080021f5
 80021dc:	0800220d 	.word	0x0800220d
 80021e0:	0800220d 	.word	0x0800220d
 80021e4:	0800220d 	.word	0x0800220d
 80021e8:	08002205 	.word	0x08002205
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021f2:	e0d8      	b.n	80023a6 <UART_SetConfig+0x2fe>
 80021f4:	2302      	movs	r3, #2
 80021f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80021fa:	e0d4      	b.n	80023a6 <UART_SetConfig+0x2fe>
 80021fc:	2304      	movs	r3, #4
 80021fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002202:	e0d0      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002204:	2308      	movs	r3, #8
 8002206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800220a:	e0cc      	b.n	80023a6 <UART_SetConfig+0x2fe>
 800220c:	2310      	movs	r3, #16
 800220e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002212:	e0c8      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a5e      	ldr	r2, [pc, #376]	; (8002394 <UART_SetConfig+0x2ec>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d125      	bne.n	800226a <UART_SetConfig+0x1c2>
 800221e:	4b5b      	ldr	r3, [pc, #364]	; (800238c <UART_SetConfig+0x2e4>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002224:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002228:	2b30      	cmp	r3, #48	; 0x30
 800222a:	d016      	beq.n	800225a <UART_SetConfig+0x1b2>
 800222c:	2b30      	cmp	r3, #48	; 0x30
 800222e:	d818      	bhi.n	8002262 <UART_SetConfig+0x1ba>
 8002230:	2b20      	cmp	r3, #32
 8002232:	d00a      	beq.n	800224a <UART_SetConfig+0x1a2>
 8002234:	2b20      	cmp	r3, #32
 8002236:	d814      	bhi.n	8002262 <UART_SetConfig+0x1ba>
 8002238:	2b00      	cmp	r3, #0
 800223a:	d002      	beq.n	8002242 <UART_SetConfig+0x19a>
 800223c:	2b10      	cmp	r3, #16
 800223e:	d008      	beq.n	8002252 <UART_SetConfig+0x1aa>
 8002240:	e00f      	b.n	8002262 <UART_SetConfig+0x1ba>
 8002242:	2300      	movs	r3, #0
 8002244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002248:	e0ad      	b.n	80023a6 <UART_SetConfig+0x2fe>
 800224a:	2302      	movs	r3, #2
 800224c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002250:	e0a9      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002252:	2304      	movs	r3, #4
 8002254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002258:	e0a5      	b.n	80023a6 <UART_SetConfig+0x2fe>
 800225a:	2308      	movs	r3, #8
 800225c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002260:	e0a1      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002262:	2310      	movs	r3, #16
 8002264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002268:	e09d      	b.n	80023a6 <UART_SetConfig+0x2fe>
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a4a      	ldr	r2, [pc, #296]	; (8002398 <UART_SetConfig+0x2f0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d125      	bne.n	80022c0 <UART_SetConfig+0x218>
 8002274:	4b45      	ldr	r3, [pc, #276]	; (800238c <UART_SetConfig+0x2e4>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800227e:	2bc0      	cmp	r3, #192	; 0xc0
 8002280:	d016      	beq.n	80022b0 <UART_SetConfig+0x208>
 8002282:	2bc0      	cmp	r3, #192	; 0xc0
 8002284:	d818      	bhi.n	80022b8 <UART_SetConfig+0x210>
 8002286:	2b80      	cmp	r3, #128	; 0x80
 8002288:	d00a      	beq.n	80022a0 <UART_SetConfig+0x1f8>
 800228a:	2b80      	cmp	r3, #128	; 0x80
 800228c:	d814      	bhi.n	80022b8 <UART_SetConfig+0x210>
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <UART_SetConfig+0x1f0>
 8002292:	2b40      	cmp	r3, #64	; 0x40
 8002294:	d008      	beq.n	80022a8 <UART_SetConfig+0x200>
 8002296:	e00f      	b.n	80022b8 <UART_SetConfig+0x210>
 8002298:	2300      	movs	r3, #0
 800229a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800229e:	e082      	b.n	80023a6 <UART_SetConfig+0x2fe>
 80022a0:	2302      	movs	r3, #2
 80022a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022a6:	e07e      	b.n	80023a6 <UART_SetConfig+0x2fe>
 80022a8:	2304      	movs	r3, #4
 80022aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022ae:	e07a      	b.n	80023a6 <UART_SetConfig+0x2fe>
 80022b0:	2308      	movs	r3, #8
 80022b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022b6:	e076      	b.n	80023a6 <UART_SetConfig+0x2fe>
 80022b8:	2310      	movs	r3, #16
 80022ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022be:	e072      	b.n	80023a6 <UART_SetConfig+0x2fe>
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a35      	ldr	r2, [pc, #212]	; (800239c <UART_SetConfig+0x2f4>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d12a      	bne.n	8002320 <UART_SetConfig+0x278>
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <UART_SetConfig+0x2e4>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022d8:	d01a      	beq.n	8002310 <UART_SetConfig+0x268>
 80022da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022de:	d81b      	bhi.n	8002318 <UART_SetConfig+0x270>
 80022e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e4:	d00c      	beq.n	8002300 <UART_SetConfig+0x258>
 80022e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ea:	d815      	bhi.n	8002318 <UART_SetConfig+0x270>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <UART_SetConfig+0x250>
 80022f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f4:	d008      	beq.n	8002308 <UART_SetConfig+0x260>
 80022f6:	e00f      	b.n	8002318 <UART_SetConfig+0x270>
 80022f8:	2300      	movs	r3, #0
 80022fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022fe:	e052      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002300:	2302      	movs	r3, #2
 8002302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002306:	e04e      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002308:	2304      	movs	r3, #4
 800230a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800230e:	e04a      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002310:	2308      	movs	r3, #8
 8002312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002316:	e046      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002318:	2310      	movs	r3, #16
 800231a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800231e:	e042      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a17      	ldr	r2, [pc, #92]	; (8002384 <UART_SetConfig+0x2dc>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d13a      	bne.n	80023a0 <UART_SetConfig+0x2f8>
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <UART_SetConfig+0x2e4>)
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002334:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002338:	d01a      	beq.n	8002370 <UART_SetConfig+0x2c8>
 800233a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800233e:	d81b      	bhi.n	8002378 <UART_SetConfig+0x2d0>
 8002340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002344:	d00c      	beq.n	8002360 <UART_SetConfig+0x2b8>
 8002346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800234a:	d815      	bhi.n	8002378 <UART_SetConfig+0x2d0>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <UART_SetConfig+0x2b0>
 8002350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002354:	d008      	beq.n	8002368 <UART_SetConfig+0x2c0>
 8002356:	e00f      	b.n	8002378 <UART_SetConfig+0x2d0>
 8002358:	2300      	movs	r3, #0
 800235a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800235e:	e022      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002360:	2302      	movs	r3, #2
 8002362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002366:	e01e      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002368:	2304      	movs	r3, #4
 800236a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800236e:	e01a      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002370:	2308      	movs	r3, #8
 8002372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002376:	e016      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002378:	2310      	movs	r3, #16
 800237a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800237e:	e012      	b.n	80023a6 <UART_SetConfig+0x2fe>
 8002380:	cfff69f3 	.word	0xcfff69f3
 8002384:	40008000 	.word	0x40008000
 8002388:	40013800 	.word	0x40013800
 800238c:	40021000 	.word	0x40021000
 8002390:	40004400 	.word	0x40004400
 8002394:	40004800 	.word	0x40004800
 8002398:	40004c00 	.word	0x40004c00
 800239c:	40005000 	.word	0x40005000
 80023a0:	2310      	movs	r3, #16
 80023a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4aae      	ldr	r2, [pc, #696]	; (8002664 <UART_SetConfig+0x5bc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	f040 8097 	bne.w	80024e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80023b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d823      	bhi.n	8002402 <UART_SetConfig+0x35a>
 80023ba:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <UART_SetConfig+0x318>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	080023e5 	.word	0x080023e5
 80023c4:	08002403 	.word	0x08002403
 80023c8:	080023ed 	.word	0x080023ed
 80023cc:	08002403 	.word	0x08002403
 80023d0:	080023f3 	.word	0x080023f3
 80023d4:	08002403 	.word	0x08002403
 80023d8:	08002403 	.word	0x08002403
 80023dc:	08002403 	.word	0x08002403
 80023e0:	080023fb 	.word	0x080023fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023e4:	f7ff fb50 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 80023e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80023ea:	e010      	b.n	800240e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023ec:	4b9e      	ldr	r3, [pc, #632]	; (8002668 <UART_SetConfig+0x5c0>)
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80023f0:	e00d      	b.n	800240e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023f2:	f7ff fadb 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 80023f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80023f8:	e009      	b.n	800240e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002400:	e005      	b.n	800240e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800240c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8130 	beq.w	8002676 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	4a94      	ldr	r2, [pc, #592]	; (800266c <UART_SetConfig+0x5c4>)
 800241c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002420:	461a      	mov	r2, r3
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	fbb3 f3f2 	udiv	r3, r3, r2
 8002428:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	429a      	cmp	r2, r3
 8002438:	d305      	bcc.n	8002446 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	429a      	cmp	r2, r3
 8002444:	d903      	bls.n	800244e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800244c:	e113      	b.n	8002676 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	2200      	movs	r2, #0
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	60fa      	str	r2, [r7, #12]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	4a84      	ldr	r2, [pc, #528]	; (800266c <UART_SetConfig+0x5c4>)
 800245c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002460:	b29b      	uxth	r3, r3
 8002462:	2200      	movs	r2, #0
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800246c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002470:	f7fd fed6 	bl	8000220 <__aeabi_uldivmod>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	020b      	lsls	r3, r1, #8
 8002486:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800248a:	0202      	lsls	r2, r0, #8
 800248c:	6979      	ldr	r1, [r7, #20]
 800248e:	6849      	ldr	r1, [r1, #4]
 8002490:	0849      	lsrs	r1, r1, #1
 8002492:	2000      	movs	r0, #0
 8002494:	460c      	mov	r4, r1
 8002496:	4605      	mov	r5, r0
 8002498:	eb12 0804 	adds.w	r8, r2, r4
 800249c:	eb43 0905 	adc.w	r9, r3, r5
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	469a      	mov	sl, r3
 80024a8:	4693      	mov	fp, r2
 80024aa:	4652      	mov	r2, sl
 80024ac:	465b      	mov	r3, fp
 80024ae:	4640      	mov	r0, r8
 80024b0:	4649      	mov	r1, r9
 80024b2:	f7fd feb5 	bl	8000220 <__aeabi_uldivmod>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4613      	mov	r3, r2
 80024bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024c4:	d308      	bcc.n	80024d8 <UART_SetConfig+0x430>
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024cc:	d204      	bcs.n	80024d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a3a      	ldr	r2, [r7, #32]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	e0ce      	b.n	8002676 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80024de:	e0ca      	b.n	8002676 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024e8:	d166      	bne.n	80025b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80024ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d827      	bhi.n	8002542 <UART_SetConfig+0x49a>
 80024f2:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <UART_SetConfig+0x450>)
 80024f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f8:	0800251d 	.word	0x0800251d
 80024fc:	08002525 	.word	0x08002525
 8002500:	0800252d 	.word	0x0800252d
 8002504:	08002543 	.word	0x08002543
 8002508:	08002533 	.word	0x08002533
 800250c:	08002543 	.word	0x08002543
 8002510:	08002543 	.word	0x08002543
 8002514:	08002543 	.word	0x08002543
 8002518:	0800253b 	.word	0x0800253b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800251c:	f7ff fab4 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002520:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002522:	e014      	b.n	800254e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002524:	f7ff fac6 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 8002528:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800252a:	e010      	b.n	800254e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800252c:	4b4e      	ldr	r3, [pc, #312]	; (8002668 <UART_SetConfig+0x5c0>)
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002530:	e00d      	b.n	800254e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002532:	f7ff fa3b 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8002536:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002538:	e009      	b.n	800254e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800253a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002540:	e005      	b.n	800254e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800254c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8090 	beq.w	8002676 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	4a44      	ldr	r2, [pc, #272]	; (800266c <UART_SetConfig+0x5c4>)
 800255c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002560:	461a      	mov	r2, r3
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	fbb3 f3f2 	udiv	r3, r3, r2
 8002568:	005a      	lsls	r2, r3, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	441a      	add	r2, r3
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	2b0f      	cmp	r3, #15
 8002580:	d916      	bls.n	80025b0 <UART_SetConfig+0x508>
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002588:	d212      	bcs.n	80025b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f023 030f 	bic.w	r3, r3, #15
 8002592:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	085b      	lsrs	r3, r3, #1
 8002598:	b29b      	uxth	r3, r3
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	b29a      	uxth	r2, r3
 80025a0:	8bfb      	ldrh	r3, [r7, #30]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	8bfa      	ldrh	r2, [r7, #30]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	e062      	b.n	8002676 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80025b6:	e05e      	b.n	8002676 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80025b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d828      	bhi.n	8002612 <UART_SetConfig+0x56a>
 80025c0:	a201      	add	r2, pc, #4	; (adr r2, 80025c8 <UART_SetConfig+0x520>)
 80025c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c6:	bf00      	nop
 80025c8:	080025ed 	.word	0x080025ed
 80025cc:	080025f5 	.word	0x080025f5
 80025d0:	080025fd 	.word	0x080025fd
 80025d4:	08002613 	.word	0x08002613
 80025d8:	08002603 	.word	0x08002603
 80025dc:	08002613 	.word	0x08002613
 80025e0:	08002613 	.word	0x08002613
 80025e4:	08002613 	.word	0x08002613
 80025e8:	0800260b 	.word	0x0800260b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025ec:	f7ff fa4c 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 80025f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025f2:	e014      	b.n	800261e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025f4:	f7ff fa5e 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 80025f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025fa:	e010      	b.n	800261e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <UART_SetConfig+0x5c0>)
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002600:	e00d      	b.n	800261e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002602:	f7ff f9d3 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 8002606:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002608:	e009      	b.n	800261e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800260a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002610:	e005      	b.n	800261e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800261c:	bf00      	nop
    }

    if (pclk != 0U)
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	2b00      	cmp	r3, #0
 8002622:	d028      	beq.n	8002676 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	4a10      	ldr	r2, [pc, #64]	; (800266c <UART_SetConfig+0x5c4>)
 800262a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800262e:	461a      	mov	r2, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	fbb3 f2f2 	udiv	r2, r3, r2
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	441a      	add	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	d910      	bls.n	8002670 <UART_SetConfig+0x5c8>
 800264e:	6a3b      	ldr	r3, [r7, #32]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d20c      	bcs.n	8002670 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	b29a      	uxth	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	e009      	b.n	8002676 <UART_SetConfig+0x5ce>
 8002662:	bf00      	nop
 8002664:	40008000 	.word	0x40008000
 8002668:	00f42400 	.word	0x00f42400
 800266c:	08004220 	.word	0x08004220
      }
      else
      {
        ret = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2201      	movs	r2, #1
 800267a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2201      	movs	r2, #1
 8002682:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2200      	movs	r2, #0
 8002690:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002692:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002696:	4618      	mov	r0, r3
 8002698:	3730      	adds	r7, #48	; 0x30
 800269a:	46bd      	mov	sp, r7
 800269c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080026a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01a      	beq.n	80027b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800279e:	d10a      	bne.n	80027b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]
  }
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027f4:	f7fe f958 	bl	8000aa8 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b08      	cmp	r3, #8
 8002806:	d10e      	bne.n	8002826 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f82f 	bl	800287a <UART_WaitOnFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e025      	b.n	8002872 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b04      	cmp	r3, #4
 8002832:	d10e      	bne.n	8002852 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f819 	bl	800287a <UART_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e00f      	b.n	8002872 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2220      	movs	r2, #32
 8002856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2220      	movs	r2, #32
 800285e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b09c      	sub	sp, #112	; 0x70
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800288a:	e0a9      	b.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	f000 80a5 	beq.w	80029e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002896:	f7fe f907 	bl	8000aa8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d302      	bcc.n	80028ac <UART_WaitOnFlagUntilTimeout+0x32>
 80028a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d140      	bne.n	800292e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80028ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80028c0:	667b      	str	r3, [r7, #100]	; 0x64
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80028d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80028d2:	e841 2300 	strex	r3, r2, [r1]
 80028d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80028d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e6      	bne.n	80028ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3308      	adds	r3, #8
 80028e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e8:	e853 3f00 	ldrex	r3, [r3]
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	663b      	str	r3, [r7, #96]	; 0x60
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3308      	adds	r3, #8
 80028fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002902:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800290c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e5      	bne.n	80028de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e069      	b.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d051      	beq.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800294a:	d149      	bne.n	80029e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002954:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	e853 3f00 	ldrex	r3, [r3]
 8002962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800296a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
 8002976:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800297a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e6      	bne.n	8002956 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3308      	adds	r3, #8
 800298e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	e853 3f00 	ldrex	r3, [r3]
 8002996:	613b      	str	r3, [r7, #16]
   return(result);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f023 0301 	bic.w	r3, r3, #1
 800299e:	66bb      	str	r3, [r7, #104]	; 0x68
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3308      	adds	r3, #8
 80029a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029a8:	623a      	str	r2, [r7, #32]
 80029aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ac:	69f9      	ldr	r1, [r7, #28]
 80029ae:	6a3a      	ldr	r2, [r7, #32]
 80029b0:	e841 2300 	strex	r3, r2, [r1]
 80029b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e5      	bne.n	8002988 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e010      	b.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	4013      	ands	r3, r2
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	f43f af46 	beq.w	800288c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3770      	adds	r7, #112	; 0x70
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b085      	sub	sp, #20
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_UARTEx_DisableFifoMode+0x16>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e027      	b.n	8002a70 <HAL_UARTEx_DisableFifoMode+0x66>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2224      	movs	r2, #36	; 0x24
 8002a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002a4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e02d      	b.n	8002af0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2224      	movs	r2, #36	; 0x24
 8002aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f84f 	bl	8002b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e02d      	b.n	8002b6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2224      	movs	r2, #36	; 0x24
 8002b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f811 	bl	8002b74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d108      	bne.n	8002b96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002b94:	e031      	b.n	8002bfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002b96:	2308      	movs	r3, #8
 8002b98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	0e5b      	lsrs	r3, r3, #25
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	0f5b      	lsrs	r3, r3, #29
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002bbe:	7bbb      	ldrb	r3, [r7, #14]
 8002bc0:	7b3a      	ldrb	r2, [r7, #12]
 8002bc2:	4911      	ldr	r1, [pc, #68]	; (8002c08 <UARTEx_SetNbDataToProcess+0x94>)
 8002bc4:	5c8a      	ldrb	r2, [r1, r2]
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002bca:	7b3a      	ldrb	r2, [r7, #12]
 8002bcc:	490f      	ldr	r1, [pc, #60]	; (8002c0c <UARTEx_SetNbDataToProcess+0x98>)
 8002bce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002bd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	7b7a      	ldrb	r2, [r7, #13]
 8002be0:	4909      	ldr	r1, [pc, #36]	; (8002c08 <UARTEx_SetNbDataToProcess+0x94>)
 8002be2:	5c8a      	ldrb	r2, [r1, r2]
 8002be4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002be8:	7b7a      	ldrb	r2, [r7, #13]
 8002bea:	4908      	ldr	r1, [pc, #32]	; (8002c0c <UARTEx_SetNbDataToProcess+0x98>)
 8002bec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002bee:	fb93 f3f2 	sdiv	r3, r3, r2
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	08004238 	.word	0x08004238
 8002c0c:	08004240 	.word	0x08004240

08002c10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c22:	2b84      	cmp	r3, #132	; 0x84
 8002c24:	d005      	beq.n	8002c32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002c26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3303      	adds	r3, #3
 8002c30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002c32:	68fb      	ldr	r3, [r7, #12]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002c44:	f000 fa74 	bl	8003130 <vTaskStartScheduler>
  
  return osOK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002c4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c50:	b087      	sub	sp, #28
 8002c52:	af02      	add	r7, sp, #8
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685c      	ldr	r4, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c64:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ffcf 	bl	8002c10 <makeFreeRtosPriority>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	9200      	str	r2, [sp, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	4632      	mov	r2, r6
 8002c80:	4629      	mov	r1, r5
 8002c82:	4620      	mov	r0, r4
 8002c84:	f000 f8d2 	bl	8002e2c <xTaskCreate>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d001      	beq.n	8002c92 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e000      	b.n	8002c94 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <osDelay+0x16>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	e000      	b.n	8002cb4 <osDelay+0x18>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fa07 	bl	80030c8 <vTaskDelay>
  
  return osOK;
 8002cba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f103 0208 	add.w	r2, r3, #8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f103 0208 	add.w	r2, r3, #8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f103 0208 	add.w	r2, r3, #8
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	601a      	str	r2, [r3, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d66:	b480      	push	{r7}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d103      	bne.n	8002d86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e00c      	b.n	8002da0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3308      	adds	r3, #8
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	e002      	b.n	8002d94 <vListInsert+0x2e>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d2f6      	bcs.n	8002d8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	601a      	str	r2, [r3, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6892      	ldr	r2, [r2, #8]
 8002dee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6852      	ldr	r2, [r2, #4]
 8002df8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d103      	bne.n	8002e0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1e5a      	subs	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08c      	sub	sp, #48	; 0x30
 8002e30:	af04      	add	r7, sp, #16
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e3c:	88fb      	ldrh	r3, [r7, #6]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fef9 	bl	8003c38 <pvPortMalloc>
 8002e46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00e      	beq.n	8002e6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e4e:	20a4      	movs	r0, #164	; 0xa4
 8002e50:	f000 fef2 	bl	8003c38 <pvPortMalloc>
 8002e54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
 8002e62:	e005      	b.n	8002e70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e64:	6978      	ldr	r0, [r7, #20]
 8002e66:	f000 ffb7 	bl	8003dd8 <vPortFree>
 8002e6a:	e001      	b.n	8002e70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d013      	beq.n	8002e9e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9303      	str	r3, [sp, #12]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	9302      	str	r3, [sp, #8]
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f80f 	bl	8002eb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e92:	69f8      	ldr	r0, [r7, #28]
 8002e94:	f000 f8ae 	bl	8002ff4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	e002      	b.n	8002ea4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
	}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3720      	adds	r7, #32
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	f023 0307 	bic.w	r3, r3, #7
 8002ed6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01f      	beq.n	8002f3e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e012      	b.n	8002f2a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	7819      	ldrb	r1, [r3, #0]
 8002f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	4413      	add	r3, r2
 8002f12:	3334      	adds	r3, #52	; 0x34
 8002f14:	460a      	mov	r2, r1
 8002f16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d006      	beq.n	8002f32 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	3301      	adds	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2b0f      	cmp	r3, #15
 8002f2e:	d9e9      	bls.n	8002f04 <prvInitialiseNewTask+0x54>
 8002f30:	e000      	b.n	8002f34 <prvInitialiseNewTask+0x84>
			{
				break;
 8002f32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f3c:	e003      	b.n	8002f46 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	d901      	bls.n	8002f50 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f4c:	2306      	movs	r3, #6
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	2200      	movs	r2, #0
 8002f60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	3304      	adds	r3, #4
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fecc 	bl	8002d04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	3318      	adds	r3, #24
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fec7 	bl	8002d04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	f1c3 0207 	rsb	r2, r3, #7
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	2200      	movs	r2, #0
 8002f90:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	3350      	adds	r3, #80	; 0x50
 8002fa6:	224c      	movs	r2, #76	; 0x4c
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f001 f83e 	bl	800402c <memset>
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <prvInitialiseNewTask+0x138>)
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	4a0c      	ldr	r2, [pc, #48]	; (8002fec <prvInitialiseNewTask+0x13c>)
 8002fba:	659a      	str	r2, [r3, #88]	; 0x58
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fbe:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <prvInitialiseNewTask+0x140>)
 8002fc0:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	68f9      	ldr	r1, [r7, #12]
 8002fc6:	69b8      	ldr	r0, [r7, #24]
 8002fc8:	f000 fc24 	bl	8003814 <pxPortInitialiseStack>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fde:	bf00      	nop
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000e78 	.word	0x20000e78
 8002fec:	20000ee0 	.word	0x20000ee0
 8002ff0:	20000f48 	.word	0x20000f48

08002ff4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ffc:	f000 fd3a 	bl	8003a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <prvAddNewTaskToReadyList+0xb8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	4a29      	ldr	r2, [pc, #164]	; (80030ac <prvAddNewTaskToReadyList+0xb8>)
 8003008:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <prvAddNewTaskToReadyList+0xbc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003012:	4a27      	ldr	r2, [pc, #156]	; (80030b0 <prvAddNewTaskToReadyList+0xbc>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <prvAddNewTaskToReadyList+0xb8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d110      	bne.n	8003042 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003020:	f000 fad0 	bl	80035c4 <prvInitialiseTaskLists>
 8003024:	e00d      	b.n	8003042 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003026:	4b23      	ldr	r3, [pc, #140]	; (80030b4 <prvAddNewTaskToReadyList+0xc0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800302e:	4b20      	ldr	r3, [pc, #128]	; (80030b0 <prvAddNewTaskToReadyList+0xbc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	429a      	cmp	r2, r3
 800303a:	d802      	bhi.n	8003042 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <prvAddNewTaskToReadyList+0xbc>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003042:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <prvAddNewTaskToReadyList+0xc4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <prvAddNewTaskToReadyList+0xc4>)
 800304a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	2201      	movs	r2, #1
 8003052:	409a      	lsls	r2, r3
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <prvAddNewTaskToReadyList+0xc8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4313      	orrs	r3, r2
 800305a:	4a18      	ldr	r2, [pc, #96]	; (80030bc <prvAddNewTaskToReadyList+0xc8>)
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <prvAddNewTaskToReadyList+0xcc>)
 800306c:	441a      	add	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	4619      	mov	r1, r3
 8003074:	4610      	mov	r0, r2
 8003076:	f7ff fe52 	bl	8002d1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800307a:	f000 fd2b 	bl	8003ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <prvAddNewTaskToReadyList+0xc0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00e      	beq.n	80030a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <prvAddNewTaskToReadyList+0xbc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	429a      	cmp	r2, r3
 8003092:	d207      	bcs.n	80030a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <prvAddNewTaskToReadyList+0xd0>)
 8003096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000218 	.word	0x20000218
 80030b0:	20000118 	.word	0x20000118
 80030b4:	20000224 	.word	0x20000224
 80030b8:	20000234 	.word	0x20000234
 80030bc:	20000220 	.word	0x20000220
 80030c0:	2000011c 	.word	0x2000011c
 80030c4:	e000ed04 	.word	0xe000ed04

080030c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d017      	beq.n	800310a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <vTaskDelay+0x60>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <vTaskDelay+0x30>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	60bb      	str	r3, [r7, #8]
}
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030f8:	f000 f86c 	bl	80031d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030fc:	2100      	movs	r1, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fb22 	bl	8003748 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003104:	f000 f874 	bl	80031f0 <xTaskResumeAll>
 8003108:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <vTaskDelay+0x64>)
 8003112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000240 	.word	0x20000240
 800312c:	e000ed04 	.word	0xe000ed04

08003130 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003136:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <vTaskStartScheduler+0x84>)
 8003138:	9301      	str	r3, [sp, #4]
 800313a:	2300      	movs	r3, #0
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2300      	movs	r3, #0
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	491d      	ldr	r1, [pc, #116]	; (80031b8 <vTaskStartScheduler+0x88>)
 8003144:	481d      	ldr	r0, [pc, #116]	; (80031bc <vTaskStartScheduler+0x8c>)
 8003146:	f7ff fe71 	bl	8002e2c <xTaskCreate>
 800314a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d11d      	bne.n	800318e <vTaskStartScheduler+0x5e>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	60bb      	str	r3, [r7, #8]
}
 8003164:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <vTaskStartScheduler+0x90>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3350      	adds	r3, #80	; 0x50
 800316c:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <vTaskStartScheduler+0x94>)
 800316e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003170:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <vTaskStartScheduler+0x98>)
 8003172:	f04f 32ff 	mov.w	r2, #4294967295
 8003176:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003178:	4b14      	ldr	r3, [pc, #80]	; (80031cc <vTaskStartScheduler+0x9c>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800317e:	4b14      	ldr	r3, [pc, #80]	; (80031d0 <vTaskStartScheduler+0xa0>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003184:	f7fd f9ca 	bl	800051c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003188:	f000 fbd2 	bl	8003930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800318c:	e00e      	b.n	80031ac <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d10a      	bne.n	80031ac <vTaskStartScheduler+0x7c>
	__asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	607b      	str	r3, [r7, #4]
}
 80031a8:	bf00      	nop
 80031aa:	e7fe      	b.n	80031aa <vTaskStartScheduler+0x7a>
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	2000023c 	.word	0x2000023c
 80031b8:	08004200 	.word	0x08004200
 80031bc:	08003595 	.word	0x08003595
 80031c0:	20000118 	.word	0x20000118
 80031c4:	2000005c 	.word	0x2000005c
 80031c8:	20000238 	.word	0x20000238
 80031cc:	20000224 	.word	0x20000224
 80031d0:	2000021c 	.word	0x2000021c

080031d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <vTaskSuspendAll+0x18>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	4a03      	ldr	r2, [pc, #12]	; (80031ec <vTaskSuspendAll+0x18>)
 80031e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80031e2:	bf00      	nop
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	20000240 	.word	0x20000240

080031f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031fe:	4b41      	ldr	r3, [pc, #260]	; (8003304 <xTaskResumeAll+0x114>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <xTaskResumeAll+0x2c>
	__asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	603b      	str	r3, [r7, #0]
}
 8003218:	bf00      	nop
 800321a:	e7fe      	b.n	800321a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800321c:	f000 fc2a 	bl	8003a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003220:	4b38      	ldr	r3, [pc, #224]	; (8003304 <xTaskResumeAll+0x114>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	3b01      	subs	r3, #1
 8003226:	4a37      	ldr	r2, [pc, #220]	; (8003304 <xTaskResumeAll+0x114>)
 8003228:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800322a:	4b36      	ldr	r3, [pc, #216]	; (8003304 <xTaskResumeAll+0x114>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d161      	bne.n	80032f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003232:	4b35      	ldr	r3, [pc, #212]	; (8003308 <xTaskResumeAll+0x118>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d05d      	beq.n	80032f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800323a:	e02e      	b.n	800329a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800323c:	4b33      	ldr	r3, [pc, #204]	; (800330c <xTaskResumeAll+0x11c>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3318      	adds	r3, #24
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fdc5 	bl	8002dd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3304      	adds	r3, #4
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fdc0 	bl	8002dd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	2201      	movs	r2, #1
 800325e:	409a      	lsls	r2, r3
 8003260:	4b2b      	ldr	r3, [pc, #172]	; (8003310 <xTaskResumeAll+0x120>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4313      	orrs	r3, r2
 8003266:	4a2a      	ldr	r2, [pc, #168]	; (8003310 <xTaskResumeAll+0x120>)
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4a27      	ldr	r2, [pc, #156]	; (8003314 <xTaskResumeAll+0x124>)
 8003278:	441a      	add	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3304      	adds	r3, #4
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f7ff fd4c 	bl	8002d1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328a:	4b23      	ldr	r3, [pc, #140]	; (8003318 <xTaskResumeAll+0x128>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	429a      	cmp	r2, r3
 8003292:	d302      	bcc.n	800329a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <xTaskResumeAll+0x12c>)
 8003296:	2201      	movs	r2, #1
 8003298:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800329a:	4b1c      	ldr	r3, [pc, #112]	; (800330c <xTaskResumeAll+0x11c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1cc      	bne.n	800323c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032a8:	f000 fa10 	bl	80036cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032ac:	4b1c      	ldr	r3, [pc, #112]	; (8003320 <xTaskResumeAll+0x130>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d010      	beq.n	80032da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032b8:	f000 f836 	bl	8003328 <xTaskIncrementTick>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80032c2:	4b16      	ldr	r3, [pc, #88]	; (800331c <xTaskResumeAll+0x12c>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f1      	bne.n	80032b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <xTaskResumeAll+0x130>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <xTaskResumeAll+0x12c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032e2:	2301      	movs	r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032e6:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <xTaskResumeAll+0x134>)
 80032e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	f3bf 8f4f 	dsb	sy
 80032f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032f6:	f000 fbed 	bl	8003ad4 <vPortExitCritical>

	return xAlreadyYielded;
 80032fa:	68bb      	ldr	r3, [r7, #8]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000240 	.word	0x20000240
 8003308:	20000218 	.word	0x20000218
 800330c:	200001d8 	.word	0x200001d8
 8003310:	20000220 	.word	0x20000220
 8003314:	2000011c 	.word	0x2000011c
 8003318:	20000118 	.word	0x20000118
 800331c:	2000022c 	.word	0x2000022c
 8003320:	20000228 	.word	0x20000228
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003332:	4b4e      	ldr	r3, [pc, #312]	; (800346c <xTaskIncrementTick+0x144>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 808e 	bne.w	8003458 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800333c:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <xTaskIncrementTick+0x148>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003344:	4a4a      	ldr	r2, [pc, #296]	; (8003470 <xTaskIncrementTick+0x148>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d120      	bne.n	8003392 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003350:	4b48      	ldr	r3, [pc, #288]	; (8003474 <xTaskIncrementTick+0x14c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <xTaskIncrementTick+0x48>
	__asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	603b      	str	r3, [r7, #0]
}
 800336c:	bf00      	nop
 800336e:	e7fe      	b.n	800336e <xTaskIncrementTick+0x46>
 8003370:	4b40      	ldr	r3, [pc, #256]	; (8003474 <xTaskIncrementTick+0x14c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b40      	ldr	r3, [pc, #256]	; (8003478 <xTaskIncrementTick+0x150>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a3e      	ldr	r2, [pc, #248]	; (8003474 <xTaskIncrementTick+0x14c>)
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4a3e      	ldr	r2, [pc, #248]	; (8003478 <xTaskIncrementTick+0x150>)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	4b3d      	ldr	r3, [pc, #244]	; (800347c <xTaskIncrementTick+0x154>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	4a3c      	ldr	r2, [pc, #240]	; (800347c <xTaskIncrementTick+0x154>)
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	f000 f99d 	bl	80036cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003392:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <xTaskIncrementTick+0x158>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	429a      	cmp	r2, r3
 800339a:	d348      	bcc.n	800342e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800339c:	4b35      	ldr	r3, [pc, #212]	; (8003474 <xTaskIncrementTick+0x14c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033a6:	4b36      	ldr	r3, [pc, #216]	; (8003480 <xTaskIncrementTick+0x158>)
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ac:	601a      	str	r2, [r3, #0]
					break;
 80033ae:	e03e      	b.n	800342e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b0:	4b30      	ldr	r3, [pc, #192]	; (8003474 <xTaskIncrementTick+0x14c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d203      	bcs.n	80033d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033c8:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <xTaskIncrementTick+0x158>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033ce:	e02e      	b.n	800342e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fcff 	bl	8002dd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3318      	adds	r3, #24
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fcf6 	bl	8002dd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	2201      	movs	r2, #1
 80033f2:	409a      	lsls	r2, r3
 80033f4:	4b23      	ldr	r3, [pc, #140]	; (8003484 <xTaskIncrementTick+0x15c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	4a22      	ldr	r2, [pc, #136]	; (8003484 <xTaskIncrementTick+0x15c>)
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4a1f      	ldr	r2, [pc, #124]	; (8003488 <xTaskIncrementTick+0x160>)
 800340c:	441a      	add	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	3304      	adds	r3, #4
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f7ff fc82 	bl	8002d1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341e:	4b1b      	ldr	r3, [pc, #108]	; (800348c <xTaskIncrementTick+0x164>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	429a      	cmp	r2, r3
 8003426:	d3b9      	bcc.n	800339c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003428:	2301      	movs	r3, #1
 800342a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800342c:	e7b6      	b.n	800339c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800342e:	4b17      	ldr	r3, [pc, #92]	; (800348c <xTaskIncrementTick+0x164>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003434:	4914      	ldr	r1, [pc, #80]	; (8003488 <xTaskIncrementTick+0x160>)
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d901      	bls.n	800344a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003446:	2301      	movs	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <xTaskIncrementTick+0x168>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003452:	2301      	movs	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e004      	b.n	8003462 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <xTaskIncrementTick+0x16c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <xTaskIncrementTick+0x16c>)
 8003460:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003462:	697b      	ldr	r3, [r7, #20]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000240 	.word	0x20000240
 8003470:	2000021c 	.word	0x2000021c
 8003474:	200001d0 	.word	0x200001d0
 8003478:	200001d4 	.word	0x200001d4
 800347c:	20000230 	.word	0x20000230
 8003480:	20000238 	.word	0x20000238
 8003484:	20000220 	.word	0x20000220
 8003488:	2000011c 	.word	0x2000011c
 800348c:	20000118 	.word	0x20000118
 8003490:	2000022c 	.word	0x2000022c
 8003494:	20000228 	.word	0x20000228

08003498 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800349e:	4b35      	ldr	r3, [pc, #212]	; (8003574 <vTaskSwitchContext+0xdc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034a6:	4b34      	ldr	r3, [pc, #208]	; (8003578 <vTaskSwitchContext+0xe0>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034ac:	e05d      	b.n	800356a <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 80034ae:	4b32      	ldr	r3, [pc, #200]	; (8003578 <vTaskSwitchContext+0xe0>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80034b4:	f7fd f839 	bl	800052a <getRunTimeCounterValue>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4a30      	ldr	r2, [pc, #192]	; (800357c <vTaskSwitchContext+0xe4>)
 80034bc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80034be:	4b2f      	ldr	r3, [pc, #188]	; (800357c <vTaskSwitchContext+0xe4>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <vTaskSwitchContext+0xe8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d909      	bls.n	80034de <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80034ca:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <vTaskSwitchContext+0xec>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80034d0:	4a2a      	ldr	r2, [pc, #168]	; (800357c <vTaskSwitchContext+0xe4>)
 80034d2:	6810      	ldr	r0, [r2, #0]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <vTaskSwitchContext+0xe8>)
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	1a82      	subs	r2, r0, r2
 80034da:	440a      	add	r2, r1
 80034dc:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 80034de:	4b27      	ldr	r3, [pc, #156]	; (800357c <vTaskSwitchContext+0xe4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a27      	ldr	r2, [pc, #156]	; (8003580 <vTaskSwitchContext+0xe8>)
 80034e4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e6:	4b28      	ldr	r3, [pc, #160]	; (8003588 <vTaskSwitchContext+0xf0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80034f4:	7afb      	ldrb	r3, [r7, #11]
 80034f6:	f1c3 031f 	rsb	r3, r3, #31
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	4923      	ldr	r1, [pc, #140]	; (800358c <vTaskSwitchContext+0xf4>)
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <vTaskSwitchContext+0x8e>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	607b      	str	r3, [r7, #4]
}
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <vTaskSwitchContext+0x8c>
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4613      	mov	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4a16      	ldr	r2, [pc, #88]	; (800358c <vTaskSwitchContext+0xf4>)
 8003532:	4413      	add	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	3308      	adds	r3, #8
 8003548:	429a      	cmp	r2, r3
 800354a:	d104      	bne.n	8003556 <vTaskSwitchContext+0xbe>
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a09      	ldr	r2, [pc, #36]	; (8003584 <vTaskSwitchContext+0xec>)
 800355e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <vTaskSwitchContext+0xec>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3350      	adds	r3, #80	; 0x50
 8003566:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <vTaskSwitchContext+0xf8>)
 8003568:	6013      	str	r3, [r2, #0]
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000240 	.word	0x20000240
 8003578:	2000022c 	.word	0x2000022c
 800357c:	20000248 	.word	0x20000248
 8003580:	20000244 	.word	0x20000244
 8003584:	20000118 	.word	0x20000118
 8003588:	20000220 	.word	0x20000220
 800358c:	2000011c 	.word	0x2000011c
 8003590:	2000005c 	.word	0x2000005c

08003594 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800359c:	f000 f852 	bl	8003644 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <prvIdleTask+0x28>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d9f9      	bls.n	800359c <prvIdleTask+0x8>
			{
				taskYIELD();
 80035a8:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <prvIdleTask+0x2c>)
 80035aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035b8:	e7f0      	b.n	800359c <prvIdleTask+0x8>
 80035ba:	bf00      	nop
 80035bc:	2000011c 	.word	0x2000011c
 80035c0:	e000ed04 	.word	0xe000ed04

080035c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	e00c      	b.n	80035ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4a12      	ldr	r2, [pc, #72]	; (8003624 <prvInitialiseTaskLists+0x60>)
 80035dc:	4413      	add	r3, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fb70 	bl	8002cc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3301      	adds	r3, #1
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b06      	cmp	r3, #6
 80035ee:	d9ef      	bls.n	80035d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80035f0:	480d      	ldr	r0, [pc, #52]	; (8003628 <prvInitialiseTaskLists+0x64>)
 80035f2:	f7ff fb67 	bl	8002cc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80035f6:	480d      	ldr	r0, [pc, #52]	; (800362c <prvInitialiseTaskLists+0x68>)
 80035f8:	f7ff fb64 	bl	8002cc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80035fc:	480c      	ldr	r0, [pc, #48]	; (8003630 <prvInitialiseTaskLists+0x6c>)
 80035fe:	f7ff fb61 	bl	8002cc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003602:	480c      	ldr	r0, [pc, #48]	; (8003634 <prvInitialiseTaskLists+0x70>)
 8003604:	f7ff fb5e 	bl	8002cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003608:	480b      	ldr	r0, [pc, #44]	; (8003638 <prvInitialiseTaskLists+0x74>)
 800360a:	f7ff fb5b 	bl	8002cc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <prvInitialiseTaskLists+0x78>)
 8003610:	4a05      	ldr	r2, [pc, #20]	; (8003628 <prvInitialiseTaskLists+0x64>)
 8003612:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <prvInitialiseTaskLists+0x7c>)
 8003616:	4a05      	ldr	r2, [pc, #20]	; (800362c <prvInitialiseTaskLists+0x68>)
 8003618:	601a      	str	r2, [r3, #0]
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000011c 	.word	0x2000011c
 8003628:	200001a8 	.word	0x200001a8
 800362c:	200001bc 	.word	0x200001bc
 8003630:	200001d8 	.word	0x200001d8
 8003634:	200001ec 	.word	0x200001ec
 8003638:	20000204 	.word	0x20000204
 800363c:	200001d0 	.word	0x200001d0
 8003640:	200001d4 	.word	0x200001d4

08003644 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800364a:	e019      	b.n	8003680 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800364c:	f000 fa12 	bl	8003a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <prvCheckTasksWaitingTermination+0x50>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fbbb 	bl	8002dd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003662:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <prvCheckTasksWaitingTermination+0x54>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3b01      	subs	r3, #1
 8003668:	4a0b      	ldr	r2, [pc, #44]	; (8003698 <prvCheckTasksWaitingTermination+0x54>)
 800366a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800366c:	4b0b      	ldr	r3, [pc, #44]	; (800369c <prvCheckTasksWaitingTermination+0x58>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3b01      	subs	r3, #1
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <prvCheckTasksWaitingTermination+0x58>)
 8003674:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003676:	f000 fa2d 	bl	8003ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f810 	bl	80036a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <prvCheckTasksWaitingTermination+0x58>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e1      	bne.n	800364c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	200001ec 	.word	0x200001ec
 8003698:	20000218 	.word	0x20000218
 800369c:	20000200 	.word	0x20000200

080036a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3350      	adds	r3, #80	; 0x50
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fcc5 	bl	800403c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fb8e 	bl	8003dd8 <vPortFree>
			vPortFree( pxTCB );
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fb8b 	bl	8003dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036c2:	bf00      	nop
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036d2:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <prvResetNextTaskUnblockTime+0x38>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <prvResetNextTaskUnblockTime+0x3c>)
 80036de:	f04f 32ff 	mov.w	r2, #4294967295
 80036e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80036e4:	e008      	b.n	80036f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <prvResetNextTaskUnblockTime+0x38>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	4a04      	ldr	r2, [pc, #16]	; (8003708 <prvResetNextTaskUnblockTime+0x3c>)
 80036f6:	6013      	str	r3, [r2, #0]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	200001d0 	.word	0x200001d0
 8003708:	20000238 	.word	0x20000238

0800370c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <xTaskGetSchedulerState+0x34>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800371a:	2301      	movs	r3, #1
 800371c:	607b      	str	r3, [r7, #4]
 800371e:	e008      	b.n	8003732 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <xTaskGetSchedulerState+0x38>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003728:	2302      	movs	r3, #2
 800372a:	607b      	str	r3, [r7, #4]
 800372c:	e001      	b.n	8003732 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800372e:	2300      	movs	r3, #0
 8003730:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003732:	687b      	ldr	r3, [r7, #4]
	}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	20000224 	.word	0x20000224
 8003744:	20000240 	.word	0x20000240

08003748 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003758:	4b28      	ldr	r3, [pc, #160]	; (80037fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3304      	adds	r3, #4
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fb3a 	bl	8002dd8 <uxListRemove>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800376a:	4b24      	ldr	r3, [pc, #144]	; (80037fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	2201      	movs	r2, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4013      	ands	r3, r2
 800377e:	4a20      	ldr	r2, [pc, #128]	; (8003800 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003780:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d10a      	bne.n	80037a0 <prvAddCurrentTaskToDelayedList+0x58>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3304      	adds	r3, #4
 8003796:	4619      	mov	r1, r3
 8003798:	481a      	ldr	r0, [pc, #104]	; (8003804 <prvAddCurrentTaskToDelayedList+0xbc>)
 800379a:	f7ff fac0 	bl	8002d1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800379e:	e026      	b.n	80037ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d209      	bcs.n	80037cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037b8:	4b13      	ldr	r3, [pc, #76]	; (8003808 <prvAddCurrentTaskToDelayedList+0xc0>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b0f      	ldr	r3, [pc, #60]	; (80037fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3304      	adds	r3, #4
 80037c2:	4619      	mov	r1, r3
 80037c4:	4610      	mov	r0, r2
 80037c6:	f7ff face 	bl	8002d66 <vListInsert>
}
 80037ca:	e010      	b.n	80037ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037cc:	4b0f      	ldr	r3, [pc, #60]	; (800380c <prvAddCurrentTaskToDelayedList+0xc4>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f7ff fac4 	bl	8002d66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80037de:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d202      	bcs.n	80037ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80037e8:	4a09      	ldr	r2, [pc, #36]	; (8003810 <prvAddCurrentTaskToDelayedList+0xc8>)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6013      	str	r3, [r2, #0]
}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	2000021c 	.word	0x2000021c
 80037fc:	20000118 	.word	0x20000118
 8003800:	20000220 	.word	0x20000220
 8003804:	20000204 	.word	0x20000204
 8003808:	200001d4 	.word	0x200001d4
 800380c:	200001d0 	.word	0x200001d0
 8003810:	20000238 	.word	0x20000238

08003814 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3b04      	subs	r3, #4
 8003824:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800382c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3b04      	subs	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	3b04      	subs	r3, #4
 8003842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003844:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <pxPortInitialiseStack+0x64>)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3b14      	subs	r3, #20
 800384e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	3b04      	subs	r3, #4
 800385a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f06f 0202 	mvn.w	r2, #2
 8003862:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3b20      	subs	r3, #32
 8003868:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800386a:	68fb      	ldr	r3, [r7, #12]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	0800387d 	.word	0x0800387d

0800387c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <prvTaskExitError+0x54>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d00a      	beq.n	80038a6 <prvTaskExitError+0x2a>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	60fb      	str	r3, [r7, #12]
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <prvTaskExitError+0x28>
	__asm volatile
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	60bb      	str	r3, [r7, #8]
}
 80038b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80038ba:	bf00      	nop
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0fc      	beq.n	80038bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80038c2:	bf00      	nop
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	2000000c 	.word	0x2000000c
	...

080038e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <pxCurrentTCBConst2>)
 80038e2:	6819      	ldr	r1, [r3, #0]
 80038e4:	6808      	ldr	r0, [r1, #0]
 80038e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ea:	f380 8809 	msr	PSP, r0
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f04f 0000 	mov.w	r0, #0
 80038f6:	f380 8811 	msr	BASEPRI, r0
 80038fa:	4770      	bx	lr
 80038fc:	f3af 8000 	nop.w

08003900 <pxCurrentTCBConst2>:
 8003900:	20000118 	.word	0x20000118
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop

08003908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003908:	4808      	ldr	r0, [pc, #32]	; (800392c <prvPortStartFirstTask+0x24>)
 800390a:	6800      	ldr	r0, [r0, #0]
 800390c:	6800      	ldr	r0, [r0, #0]
 800390e:	f380 8808 	msr	MSP, r0
 8003912:	f04f 0000 	mov.w	r0, #0
 8003916:	f380 8814 	msr	CONTROL, r0
 800391a:	b662      	cpsie	i
 800391c:	b661      	cpsie	f
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	df00      	svc	0
 8003928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800392a:	bf00      	nop
 800392c:	e000ed08 	.word	0xe000ed08

08003930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003936:	4b46      	ldr	r3, [pc, #280]	; (8003a50 <xPortStartScheduler+0x120>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a46      	ldr	r2, [pc, #280]	; (8003a54 <xPortStartScheduler+0x124>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d10a      	bne.n	8003956 <xPortStartScheduler+0x26>
	__asm volatile
 8003940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003944:	f383 8811 	msr	BASEPRI, r3
 8003948:	f3bf 8f6f 	isb	sy
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	613b      	str	r3, [r7, #16]
}
 8003952:	bf00      	nop
 8003954:	e7fe      	b.n	8003954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003956:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <xPortStartScheduler+0x120>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3f      	ldr	r2, [pc, #252]	; (8003a58 <xPortStartScheduler+0x128>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d10a      	bne.n	8003976 <xPortStartScheduler+0x46>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	60fb      	str	r3, [r7, #12]
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003976:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <xPortStartScheduler+0x12c>)
 8003978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	22ff      	movs	r2, #255	; 0xff
 8003986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <xPortStartScheduler+0x130>)
 800399c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800399e:	4b31      	ldr	r3, [pc, #196]	; (8003a64 <xPortStartScheduler+0x134>)
 80039a0:	2207      	movs	r2, #7
 80039a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039a4:	e009      	b.n	80039ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80039a6:	4b2f      	ldr	r3, [pc, #188]	; (8003a64 <xPortStartScheduler+0x134>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	4a2d      	ldr	r2, [pc, #180]	; (8003a64 <xPortStartScheduler+0x134>)
 80039ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b80      	cmp	r3, #128	; 0x80
 80039c4:	d0ef      	beq.n	80039a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039c6:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <xPortStartScheduler+0x134>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f1c3 0307 	rsb	r3, r3, #7
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d00a      	beq.n	80039e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	60bb      	str	r3, [r7, #8]
}
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039e8:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <xPortStartScheduler+0x134>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	4a1d      	ldr	r2, [pc, #116]	; (8003a64 <xPortStartScheduler+0x134>)
 80039f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039f2:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <xPortStartScheduler+0x134>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039fa:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <xPortStartScheduler+0x134>)
 80039fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a06:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <xPortStartScheduler+0x138>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <xPortStartScheduler+0x138>)
 8003a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <xPortStartScheduler+0x138>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <xPortStartScheduler+0x138>)
 8003a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a1e:	f000 f8dd 	bl	8003bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <xPortStartScheduler+0x13c>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003a28:	f000 f8fc 	bl	8003c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a2c:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <xPortStartScheduler+0x140>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0f      	ldr	r2, [pc, #60]	; (8003a70 <xPortStartScheduler+0x140>)
 8003a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a38:	f7ff ff66 	bl	8003908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a3c:	f7ff fd2c 	bl	8003498 <vTaskSwitchContext>
	prvTaskExitError();
 8003a40:	f7ff ff1c 	bl	800387c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	e000ed00 	.word	0xe000ed00
 8003a54:	410fc271 	.word	0x410fc271
 8003a58:	410fc270 	.word	0x410fc270
 8003a5c:	e000e400 	.word	0xe000e400
 8003a60:	2000024c 	.word	0x2000024c
 8003a64:	20000250 	.word	0x20000250
 8003a68:	e000ed20 	.word	0xe000ed20
 8003a6c:	2000000c 	.word	0x2000000c
 8003a70:	e000ef34 	.word	0xe000ef34

08003a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	607b      	str	r3, [r7, #4]
}
 8003a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <vPortEnterCritical+0x58>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3301      	adds	r3, #1
 8003a94:	4a0d      	ldr	r2, [pc, #52]	; (8003acc <vPortEnterCritical+0x58>)
 8003a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a98:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <vPortEnterCritical+0x58>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d10f      	bne.n	8003ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <vPortEnterCritical+0x5c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	603b      	str	r3, [r7, #0]
}
 8003abc:	bf00      	nop
 8003abe:	e7fe      	b.n	8003abe <vPortEnterCritical+0x4a>
	}
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	2000000c 	.word	0x2000000c
 8003ad0:	e000ed04 	.word	0xe000ed04

08003ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ada:	4b12      	ldr	r3, [pc, #72]	; (8003b24 <vPortExitCritical+0x50>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <vPortExitCritical+0x24>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	607b      	str	r3, [r7, #4]
}
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <vPortExitCritical+0x50>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <vPortExitCritical+0x50>)
 8003b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <vPortExitCritical+0x50>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d105      	bne.n	8003b16 <vPortExitCritical+0x42>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	2000000c 	.word	0x2000000c
	...

08003b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b30:	f3ef 8009 	mrs	r0, PSP
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	4b15      	ldr	r3, [pc, #84]	; (8003b90 <pxCurrentTCBConst>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	f01e 0f10 	tst.w	lr, #16
 8003b40:	bf08      	it	eq
 8003b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4a:	6010      	str	r0, [r2, #0]
 8003b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b54:	f380 8811 	msr	BASEPRI, r0
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f7ff fc9a 	bl	8003498 <vTaskSwitchContext>
 8003b64:	f04f 0000 	mov.w	r0, #0
 8003b68:	f380 8811 	msr	BASEPRI, r0
 8003b6c:	bc09      	pop	{r0, r3}
 8003b6e:	6819      	ldr	r1, [r3, #0]
 8003b70:	6808      	ldr	r0, [r1, #0]
 8003b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b76:	f01e 0f10 	tst.w	lr, #16
 8003b7a:	bf08      	it	eq
 8003b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b80:	f380 8809 	msr	PSP, r0
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	f3af 8000 	nop.w

08003b90 <pxCurrentTCBConst>:
 8003b90:	20000118 	.word	0x20000118
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop

08003b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	607b      	str	r3, [r7, #4]
}
 8003bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003bb2:	f7ff fbb9 	bl	8003328 <xTaskIncrementTick>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <xPortSysTickHandler+0x40>)
 8003bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	f383 8811 	msr	BASEPRI, r3
}
 8003bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <vPortSetupTimerInterrupt+0x34>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <vPortSetupTimerInterrupt+0x38>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <vPortSetupTimerInterrupt+0x3c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <vPortSetupTimerInterrupt+0x40>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	4a09      	ldr	r2, [pc, #36]	; (8003c20 <vPortSetupTimerInterrupt+0x44>)
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <vPortSetupTimerInterrupt+0x34>)
 8003c00:	2207      	movs	r2, #7
 8003c02:	601a      	str	r2, [r3, #0]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000e010 	.word	0xe000e010
 8003c14:	e000e018 	.word	0xe000e018
 8003c18:	20000000 	.word	0x20000000
 8003c1c:	10624dd3 	.word	0x10624dd3
 8003c20:	e000e014 	.word	0xe000e014

08003c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003c34 <vPortEnableVFP+0x10>
 8003c28:	6801      	ldr	r1, [r0, #0]
 8003c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c2e:	6001      	str	r1, [r0, #0]
 8003c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c32:	bf00      	nop
 8003c34:	e000ed88 	.word	0xe000ed88

08003c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c44:	f7ff fac6 	bl	80031d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c48:	4b5d      	ldr	r3, [pc, #372]	; (8003dc0 <pvPortMalloc+0x188>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d101      	bne.n	8003c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c50:	f000 f924 	bl	8003e9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c54:	4b5b      	ldr	r3, [pc, #364]	; (8003dc4 <pvPortMalloc+0x18c>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f040 8093 	bne.w	8003d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01d      	beq.n	8003ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003c68:	2208      	movs	r2, #8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d014      	beq.n	8003ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f023 0307 	bic.w	r3, r3, #7
 8003c80:	3308      	adds	r3, #8
 8003c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	617b      	str	r3, [r7, #20]
}
 8003ca0:	bf00      	nop
 8003ca2:	e7fe      	b.n	8003ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d06e      	beq.n	8003d88 <pvPortMalloc+0x150>
 8003caa:	4b47      	ldr	r3, [pc, #284]	; (8003dc8 <pvPortMalloc+0x190>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d869      	bhi.n	8003d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cb4:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <pvPortMalloc+0x194>)
 8003cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cb8:	4b44      	ldr	r3, [pc, #272]	; (8003dcc <pvPortMalloc+0x194>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cbe:	e004      	b.n	8003cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d903      	bls.n	8003cdc <pvPortMalloc+0xa4>
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f1      	bne.n	8003cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003cdc:	4b38      	ldr	r3, [pc, #224]	; (8003dc0 <pvPortMalloc+0x188>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d050      	beq.n	8003d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2208      	movs	r2, #8
 8003cec:	4413      	add	r3, r2
 8003cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	1ad2      	subs	r2, r2, r3
 8003d00:	2308      	movs	r3, #8
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d91f      	bls.n	8003d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <pvPortMalloc+0xf8>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	613b      	str	r3, [r7, #16]
}
 8003d2c:	bf00      	nop
 8003d2e:	e7fe      	b.n	8003d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	1ad2      	subs	r2, r2, r3
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d42:	69b8      	ldr	r0, [r7, #24]
 8003d44:	f000 f90c 	bl	8003f60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d48:	4b1f      	ldr	r3, [pc, #124]	; (8003dc8 <pvPortMalloc+0x190>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <pvPortMalloc+0x190>)
 8003d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d56:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <pvPortMalloc+0x190>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <pvPortMalloc+0x198>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d203      	bcs.n	8003d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d62:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <pvPortMalloc+0x190>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1a      	ldr	r2, [pc, #104]	; (8003dd0 <pvPortMalloc+0x198>)
 8003d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <pvPortMalloc+0x18c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <pvPortMalloc+0x19c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <pvPortMalloc+0x19c>)
 8003d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d88:	f7ff fa32 	bl	80031f0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003d92:	f7fc fbd2 	bl	800053a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d00a      	beq.n	8003db6 <pvPortMalloc+0x17e>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	60fb      	str	r3, [r7, #12]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <pvPortMalloc+0x17c>
	return pvReturn;
 8003db6:	69fb      	ldr	r3, [r7, #28]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3728      	adds	r7, #40	; 0x28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000e5c 	.word	0x20000e5c
 8003dc4:	20000e70 	.word	0x20000e70
 8003dc8:	20000e60 	.word	0x20000e60
 8003dcc:	20000e54 	.word	0x20000e54
 8003dd0:	20000e64 	.word	0x20000e64
 8003dd4:	20000e68 	.word	0x20000e68

08003dd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d04d      	beq.n	8003e86 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003dea:	2308      	movs	r3, #8
 8003dec:	425b      	negs	r3, r3
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4413      	add	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <vPortFree+0xb8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4013      	ands	r3, r2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <vPortFree+0x44>
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	60fb      	str	r3, [r7, #12]
}
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00a      	beq.n	8003e3a <vPortFree+0x62>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60bb      	str	r3, [r7, #8]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <vPortFree+0xb8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01e      	beq.n	8003e86 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d11a      	bne.n	8003e86 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <vPortFree+0xb8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e60:	f7ff f9b8 	bl	80031d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <vPortFree+0xbc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <vPortFree+0xbc>)
 8003e70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e72:	6938      	ldr	r0, [r7, #16]
 8003e74:	f000 f874 	bl	8003f60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003e78:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <vPortFree+0xc0>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	4a06      	ldr	r2, [pc, #24]	; (8003e98 <vPortFree+0xc0>)
 8003e80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003e82:	f7ff f9b5 	bl	80031f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e86:	bf00      	nop
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000e70 	.word	0x20000e70
 8003e94:	20000e60 	.word	0x20000e60
 8003e98:	20000e6c 	.word	0x20000e6c

08003e9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ea2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ea6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ea8:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <prvHeapInit+0xac>)
 8003eaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00c      	beq.n	8003ed0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3307      	adds	r3, #7
 8003eba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0307 	bic.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <prvHeapInit+0xac>)
 8003ecc:	4413      	add	r3, r2
 8003ece:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	; (8003f4c <prvHeapInit+0xb0>)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <prvHeapInit+0xb0>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ee8:	2208      	movs	r2, #8
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0307 	bic.w	r3, r3, #7
 8003ef6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a15      	ldr	r2, [pc, #84]	; (8003f50 <prvHeapInit+0xb4>)
 8003efc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003efe:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <prvHeapInit+0xb4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2200      	movs	r2, #0
 8003f04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f06:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <prvHeapInit+0xb4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	1ad2      	subs	r2, r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f1c:	4b0c      	ldr	r3, [pc, #48]	; (8003f50 <prvHeapInit+0xb4>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4a0a      	ldr	r2, [pc, #40]	; (8003f54 <prvHeapInit+0xb8>)
 8003f2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <prvHeapInit+0xbc>)
 8003f32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f34:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <prvHeapInit+0xc0>)
 8003f36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003f3a:	601a      	str	r2, [r3, #0]
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	20000254 	.word	0x20000254
 8003f4c:	20000e54 	.word	0x20000e54
 8003f50:	20000e5c 	.word	0x20000e5c
 8003f54:	20000e64 	.word	0x20000e64
 8003f58:	20000e60 	.word	0x20000e60
 8003f5c:	20000e70 	.word	0x20000e70

08003f60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f68:	4b28      	ldr	r3, [pc, #160]	; (800400c <prvInsertBlockIntoFreeList+0xac>)
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e002      	b.n	8003f74 <prvInsertBlockIntoFreeList+0x14>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d8f7      	bhi.n	8003f6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	4413      	add	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d108      	bne.n	8003fa2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	441a      	add	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	441a      	add	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d118      	bne.n	8003fe8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <prvInsertBlockIntoFreeList+0xb0>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d00d      	beq.n	8003fde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	441a      	add	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e008      	b.n	8003ff0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <prvInsertBlockIntoFreeList+0xb0>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	e003      	b.n	8003ff0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d002      	beq.n	8003ffe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000e54 	.word	0x20000e54
 8004010:	20000e5c 	.word	0x20000e5c

08004014 <__malloc_lock>:
 8004014:	4801      	ldr	r0, [pc, #4]	; (800401c <__malloc_lock+0x8>)
 8004016:	f7fc bcba 	b.w	800098e <__retarget_lock_acquire_recursive>
 800401a:	bf00      	nop
 800401c:	20000110 	.word	0x20000110

08004020 <__malloc_unlock>:
 8004020:	4801      	ldr	r0, [pc, #4]	; (8004028 <__malloc_unlock+0x8>)
 8004022:	f7fc bcc8 	b.w	80009b6 <__retarget_lock_release_recursive>
 8004026:	bf00      	nop
 8004028:	20000110 	.word	0x20000110

0800402c <memset>:
 800402c:	4402      	add	r2, r0
 800402e:	4603      	mov	r3, r0
 8004030:	4293      	cmp	r3, r2
 8004032:	d100      	bne.n	8004036 <memset+0xa>
 8004034:	4770      	bx	lr
 8004036:	f803 1b01 	strb.w	r1, [r3], #1
 800403a:	e7f9      	b.n	8004030 <memset+0x4>

0800403c <_reclaim_reent>:
 800403c:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <_reclaim_reent+0xa8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4283      	cmp	r3, r0
 8004042:	b570      	push	{r4, r5, r6, lr}
 8004044:	4604      	mov	r4, r0
 8004046:	d04b      	beq.n	80040e0 <_reclaim_reent+0xa4>
 8004048:	69c3      	ldr	r3, [r0, #28]
 800404a:	b143      	cbz	r3, 800405e <_reclaim_reent+0x22>
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d144      	bne.n	80040dc <_reclaim_reent+0xa0>
 8004052:	69e3      	ldr	r3, [r4, #28]
 8004054:	6819      	ldr	r1, [r3, #0]
 8004056:	b111      	cbz	r1, 800405e <_reclaim_reent+0x22>
 8004058:	4620      	mov	r0, r4
 800405a:	f000 f869 	bl	8004130 <_free_r>
 800405e:	6961      	ldr	r1, [r4, #20]
 8004060:	b111      	cbz	r1, 8004068 <_reclaim_reent+0x2c>
 8004062:	4620      	mov	r0, r4
 8004064:	f000 f864 	bl	8004130 <_free_r>
 8004068:	69e1      	ldr	r1, [r4, #28]
 800406a:	b111      	cbz	r1, 8004072 <_reclaim_reent+0x36>
 800406c:	4620      	mov	r0, r4
 800406e:	f000 f85f 	bl	8004130 <_free_r>
 8004072:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004074:	b111      	cbz	r1, 800407c <_reclaim_reent+0x40>
 8004076:	4620      	mov	r0, r4
 8004078:	f000 f85a 	bl	8004130 <_free_r>
 800407c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800407e:	b111      	cbz	r1, 8004086 <_reclaim_reent+0x4a>
 8004080:	4620      	mov	r0, r4
 8004082:	f000 f855 	bl	8004130 <_free_r>
 8004086:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004088:	b111      	cbz	r1, 8004090 <_reclaim_reent+0x54>
 800408a:	4620      	mov	r0, r4
 800408c:	f000 f850 	bl	8004130 <_free_r>
 8004090:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004092:	b111      	cbz	r1, 800409a <_reclaim_reent+0x5e>
 8004094:	4620      	mov	r0, r4
 8004096:	f000 f84b 	bl	8004130 <_free_r>
 800409a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800409c:	b111      	cbz	r1, 80040a4 <_reclaim_reent+0x68>
 800409e:	4620      	mov	r0, r4
 80040a0:	f000 f846 	bl	8004130 <_free_r>
 80040a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80040a6:	b111      	cbz	r1, 80040ae <_reclaim_reent+0x72>
 80040a8:	4620      	mov	r0, r4
 80040aa:	f000 f841 	bl	8004130 <_free_r>
 80040ae:	6a23      	ldr	r3, [r4, #32]
 80040b0:	b1b3      	cbz	r3, 80040e0 <_reclaim_reent+0xa4>
 80040b2:	4620      	mov	r0, r4
 80040b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80040b8:	4718      	bx	r3
 80040ba:	5949      	ldr	r1, [r1, r5]
 80040bc:	b941      	cbnz	r1, 80040d0 <_reclaim_reent+0x94>
 80040be:	3504      	adds	r5, #4
 80040c0:	69e3      	ldr	r3, [r4, #28]
 80040c2:	2d80      	cmp	r5, #128	; 0x80
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	d1f8      	bne.n	80040ba <_reclaim_reent+0x7e>
 80040c8:	4620      	mov	r0, r4
 80040ca:	f000 f831 	bl	8004130 <_free_r>
 80040ce:	e7c0      	b.n	8004052 <_reclaim_reent+0x16>
 80040d0:	680e      	ldr	r6, [r1, #0]
 80040d2:	4620      	mov	r0, r4
 80040d4:	f000 f82c 	bl	8004130 <_free_r>
 80040d8:	4631      	mov	r1, r6
 80040da:	e7ef      	b.n	80040bc <_reclaim_reent+0x80>
 80040dc:	2500      	movs	r5, #0
 80040de:	e7ef      	b.n	80040c0 <_reclaim_reent+0x84>
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
 80040e2:	bf00      	nop
 80040e4:	2000005c 	.word	0x2000005c

080040e8 <__libc_init_array>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	4d0d      	ldr	r5, [pc, #52]	; (8004120 <__libc_init_array+0x38>)
 80040ec:	4c0d      	ldr	r4, [pc, #52]	; (8004124 <__libc_init_array+0x3c>)
 80040ee:	1b64      	subs	r4, r4, r5
 80040f0:	10a4      	asrs	r4, r4, #2
 80040f2:	2600      	movs	r6, #0
 80040f4:	42a6      	cmp	r6, r4
 80040f6:	d109      	bne.n	800410c <__libc_init_array+0x24>
 80040f8:	4d0b      	ldr	r5, [pc, #44]	; (8004128 <__libc_init_array+0x40>)
 80040fa:	4c0c      	ldr	r4, [pc, #48]	; (800412c <__libc_init_array+0x44>)
 80040fc:	f000 f864 	bl	80041c8 <_init>
 8004100:	1b64      	subs	r4, r4, r5
 8004102:	10a4      	asrs	r4, r4, #2
 8004104:	2600      	movs	r6, #0
 8004106:	42a6      	cmp	r6, r4
 8004108:	d105      	bne.n	8004116 <__libc_init_array+0x2e>
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004110:	4798      	blx	r3
 8004112:	3601      	adds	r6, #1
 8004114:	e7ee      	b.n	80040f4 <__libc_init_array+0xc>
 8004116:	f855 3b04 	ldr.w	r3, [r5], #4
 800411a:	4798      	blx	r3
 800411c:	3601      	adds	r6, #1
 800411e:	e7f2      	b.n	8004106 <__libc_init_array+0x1e>
 8004120:	08004250 	.word	0x08004250
 8004124:	08004250 	.word	0x08004250
 8004128:	08004250 	.word	0x08004250
 800412c:	08004254 	.word	0x08004254

08004130 <_free_r>:
 8004130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004132:	2900      	cmp	r1, #0
 8004134:	d044      	beq.n	80041c0 <_free_r+0x90>
 8004136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800413a:	9001      	str	r0, [sp, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f1a1 0404 	sub.w	r4, r1, #4
 8004142:	bfb8      	it	lt
 8004144:	18e4      	addlt	r4, r4, r3
 8004146:	f7ff ff65 	bl	8004014 <__malloc_lock>
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <_free_r+0x94>)
 800414c:	9801      	ldr	r0, [sp, #4]
 800414e:	6813      	ldr	r3, [r2, #0]
 8004150:	b933      	cbnz	r3, 8004160 <_free_r+0x30>
 8004152:	6063      	str	r3, [r4, #4]
 8004154:	6014      	str	r4, [r2, #0]
 8004156:	b003      	add	sp, #12
 8004158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800415c:	f7ff bf60 	b.w	8004020 <__malloc_unlock>
 8004160:	42a3      	cmp	r3, r4
 8004162:	d908      	bls.n	8004176 <_free_r+0x46>
 8004164:	6825      	ldr	r5, [r4, #0]
 8004166:	1961      	adds	r1, r4, r5
 8004168:	428b      	cmp	r3, r1
 800416a:	bf01      	itttt	eq
 800416c:	6819      	ldreq	r1, [r3, #0]
 800416e:	685b      	ldreq	r3, [r3, #4]
 8004170:	1949      	addeq	r1, r1, r5
 8004172:	6021      	streq	r1, [r4, #0]
 8004174:	e7ed      	b.n	8004152 <_free_r+0x22>
 8004176:	461a      	mov	r2, r3
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	b10b      	cbz	r3, 8004180 <_free_r+0x50>
 800417c:	42a3      	cmp	r3, r4
 800417e:	d9fa      	bls.n	8004176 <_free_r+0x46>
 8004180:	6811      	ldr	r1, [r2, #0]
 8004182:	1855      	adds	r5, r2, r1
 8004184:	42a5      	cmp	r5, r4
 8004186:	d10b      	bne.n	80041a0 <_free_r+0x70>
 8004188:	6824      	ldr	r4, [r4, #0]
 800418a:	4421      	add	r1, r4
 800418c:	1854      	adds	r4, r2, r1
 800418e:	42a3      	cmp	r3, r4
 8004190:	6011      	str	r1, [r2, #0]
 8004192:	d1e0      	bne.n	8004156 <_free_r+0x26>
 8004194:	681c      	ldr	r4, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	6053      	str	r3, [r2, #4]
 800419a:	440c      	add	r4, r1
 800419c:	6014      	str	r4, [r2, #0]
 800419e:	e7da      	b.n	8004156 <_free_r+0x26>
 80041a0:	d902      	bls.n	80041a8 <_free_r+0x78>
 80041a2:	230c      	movs	r3, #12
 80041a4:	6003      	str	r3, [r0, #0]
 80041a6:	e7d6      	b.n	8004156 <_free_r+0x26>
 80041a8:	6825      	ldr	r5, [r4, #0]
 80041aa:	1961      	adds	r1, r4, r5
 80041ac:	428b      	cmp	r3, r1
 80041ae:	bf04      	itt	eq
 80041b0:	6819      	ldreq	r1, [r3, #0]
 80041b2:	685b      	ldreq	r3, [r3, #4]
 80041b4:	6063      	str	r3, [r4, #4]
 80041b6:	bf04      	itt	eq
 80041b8:	1949      	addeq	r1, r1, r5
 80041ba:	6021      	streq	r1, [r4, #0]
 80041bc:	6054      	str	r4, [r2, #4]
 80041be:	e7ca      	b.n	8004156 <_free_r+0x26>
 80041c0:	b003      	add	sp, #12
 80041c2:	bd30      	pop	{r4, r5, pc}
 80041c4:	20000e74 	.word	0x20000e74

080041c8 <_init>:
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	bf00      	nop
 80041cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ce:	bc08      	pop	{r3}
 80041d0:	469e      	mov	lr, r3
 80041d2:	4770      	bx	lr

080041d4 <_fini>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr
